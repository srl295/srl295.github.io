<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steven R. Loomis</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://srl295.github.io/"/>
  <updated>2020-05-22T00:10:18.510Z</updated>
  <id>https://srl295.github.io/</id>
  
  <author>
    <name>Steven R. Loomis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sketch - how text works</title>
    <link href="https://srl295.github.io/2020/01/16/sketch-how-text-works/"/>
    <id>https://srl295.github.io/2020/01/16/sketch-how-text-works/</id>
    <published>2020-01-17T02:06:24.000Z</published>
    <updated>2020-05-22T00:10:18.510Z</updated>
    
    <content type="html"><![CDATA[<p>Just a little sketch trying to explain how text works, fromthe brain of the sender to the brain of the recipient.</p><p>Work in progress of course.</p><img src="/2020/01/16/sketch-how-text-works/sketch.png" title="pencil sketch of rendering process">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Just a little sketch trying to explain how text works, from
the brain of the sender to the brain of the recipient.&lt;/p&gt;
&lt;p&gt;Work in progres
      
    
    </summary>
    
    
      <category term="unicode" scheme="https://srl295.github.io/tags/unicode/"/>
    
      <category term="g11n" scheme="https://srl295.github.io/tags/g11n/"/>
    
      <category term="sketch" scheme="https://srl295.github.io/tags/sketch/"/>
    
  </entry>
  
  <entry>
    <title>git twofer</title>
    <link href="https://srl295.github.io/2019/09/09/git-twofer/"/>
    <id>https://srl295.github.io/2019/09/09/git-twofer/</id>
    <published>2019-09-09T16:36:01.000Z</published>
    <updated>2020-05-22T00:10:18.504Z</updated>
    
    <content type="html"><![CDATA[<p>A couple of useful <code>git</code> commands. (Meaning: <em>writing this down so that I don’t forget it!</em>)</p><h2 id="remotes-group"><a href="#remotes-group" class="headerlink" title="remotes.group"></a>remotes.group</h2><p>I seem to have added a lot of remotes to some of my repos. Remotes are helpful for checking on the progressof different branches people are working on. But what if I want to <code>git fetch --all</code> but not really fetch<em>all</em> remotes? There has to be.. a better way.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config remotes.dev <span class="string">"srl295 upstream"</span></span><br></pre></td></tr></table></figure><p>Aha. Now I can do:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p dev</span><br></pre></td></tr></table></figure><p>And only the two “dev” remotes (<code>srl295</code>, my work, and <code>upstream</code>, the upstream fork) get updated.</p><h2 id="worktree"><a href="#worktree" class="headerlink" title="worktree"></a>worktree</h2><p>I sometimes have several <a href="http://icu-project.org" target="_blank" rel="noopener">icu</a> branches going at once. A git worktree allowsme to work on several branches without having to have unrelated (several gig of metadata) directories.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/src/icu</span><br><span class="line">$ git worktree add ../icu-64.2 release-64-2</span><br></pre></td></tr></table></figure><p>Now <code>~/src/icu-64.2</code> contains a separate branch (or tag or whatever), but the objects (and LFS!) areall shared. When I’m done with it,</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/src/icu</span><br><span class="line">$ git worktree remove ../icu-64.2</span><br></pre></td></tr></table></figure><p>If I want to see what worktrees I have open, I can do this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git worktree list</span><br><span class="line">/Users/srl/src/icu           7cd02ed29e [cldr-prod-data]</span><br><span class="line">/Users/srl/src/c-3-8         3e38a82d1c [c-maint-3-8]</span><br><span class="line">/Users/srl/src/icu-4.8       ca6a2dd032 [maint/maint-4-8]</span><br><span class="line">/Users/srl/src/icu-maint-50  52a662e0df (detached HEAD)</span><br><span class="line">/Users/srl/src/icu-maint-62  7c7b8bd570 [maint/maint-62]</span><br><span class="line">/Users/srl/src/icu-maint-63  4f715ae124 [maint/maint-63]</span><br><span class="line">/Users/srl/src/icu-maint-64  b8db662f91 [fix-rpath-642]</span><br><span class="line">/Users/srl/src/icu.aixgcc    b40f8b8b16 [aixgcc]</span><br></pre></td></tr></table></figure><p>You can run the <code>worktree</code> commands from any of the worktrees. It’s like a happy git family ofworktrees!</p><p>Credit to Myles here: <div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/MylesBorins/status/1080892685936967681" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A couple of useful &lt;code&gt;git&lt;/code&gt; commands. (Meaning: &lt;em&gt;writing this down so that I don’t forget it!&lt;/em&gt;)&lt;/p&gt;
&lt;h2 id=&quot;remotes-group&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ICU Infrastructure Migration</title>
    <link href="https://srl295.github.io/2018/07/02/icu-infra/"/>
    <id>https://srl295.github.io/2018/07/02/icu-infra/</id>
    <published>2018-07-03T01:24:54.000Z</published>
    <updated>2020-05-22T00:10:18.504Z</updated>
    
    <content type="html"><![CDATA[<p>Well, it’s done. As of <a href="https://time.is/2359_30_Jun_2018_in_UTC?SRL_icu-infrastructure_EOL" target="_blank" rel="noopener">the end of the first half of 2018</a> I have exitted the role of primary infrastructure support for <a href="https://ssl.icu-project.org" target="_blank" rel="noopener">Unicode ICU</a>, which I have had on and off since about 2002. (ICU has been open source since 1999, and the source code has roots going back even further.)</p><p>What I want to cover in this post is the actual migration process- see the ICU site for specifics about how to use the ICU repository and bug system. <strong>Note2</strong> Here is a link to Unicode’s <a href="http://blog.unicode.org/2018/07/icu-moves-to-github-and-jira.html" target="_blank" rel="noopener">official blog post.</a> </p><img src="/2018/07/02/icu-infra/iculogo_dev.png" title="ICU Development"><blockquote><p><strong>Note 1:</strong> In the first edition of this post, I didn&#39;t make a couple of things clear enough:</p><ol><li><p><strong>Teamwork</strong> — I did not accomplish all of the steps below alone. Thanks to all of the ICU-TC colleagues for helping with review and engineering tasks (that are still ongoing as I write this).</p></li><li><p><strong>I’m not done with ICU</strong> — I remain a member of ICU-TC and I hope to actually contribute something again, now that my time isn’t spent “keeping the lights on.”</p></li></ol></blockquote><h1 id="scoping-the-problem"><a href="#scoping-the-problem" class="headerlink" title="scoping the problem"></a>scoping the problem</h1><p>The major two apects that needed migration were:</p><ul><li>source code: 42,000 commits from Subversion to Git - hosted on GitHub (thanks!)</li><li>bugs: 13,000 bugs from <a href="http://trac.edgewall.org/" target="_blank" rel="noopener">trac</a> to JIRA, hosted on the Atlassian cloud (thanks!)</li></ul><p>Notice a repeated key word above:  hosted. </p><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/zenodotus/status/1004435078854922240" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>Hosted mean that this role <em>goes away</em>. This is a continuation of a trend started a few years ago when I recycled 1,500+ pounds (680+ kg) of server equipment that used to be the ICU continuous build farm.</p><h2 id="svn-to-git"><a href="#svn-to-git" class="headerlink" title="svn to git"></a>svn to git</h2><p>Subversion to git may not sound like it should be particularly difficult, using <a href="https://subgit.com/" target="_blank" rel="noopener">subgit</a> (thanks for the OSS license!) and others. However there are a number of mitigating factors.</p><h3 id="Factor-1-Nonstandard-svn-tree-use"><a href="#Factor-1-Nonstandard-svn-tree-use" class="headerlink" title="Factor 1: Nonstandard svn tree use"></a>Factor 1: Nonstandard svn tree use</h3><p>If you have ever set up your own Subversion repo, you will be familiar with the top level trunk/branches/tags structure. You may also be aware that in svn (as is the UNIX way) “everything is a directory.” ICU had started with <a href="http://svnbook.red-bean.com/en/1.6/svn.reposadmin.planning.html" target="_blank" rel="noopener"><em>separate projects</em></a> for icu4c and icu4j like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">icu/</span><br><span class="line">    trunk/</span><br><span class="line">    tags/</span><br><span class="line">        release-1-2-3/</span><br><span class="line">    branches/</span><br><span class="line">        srl/</span><br><span class="line">            someotherfeature/</span><br><span class="line">icu4j/</span><br><span class="line">    trunk/</span><br><span class="line">    tags/</span><br><span class="line">        release-1-2-3/</span><br><span class="line">    branches/</span><br><span class="line">        srl/</span><br><span class="line">            somefeature/</span><br></pre></td></tr></table></figure><h3 id="Factor-1b-changing-nonstandard-tree-use"><a href="#Factor-1b-changing-nonstandard-tree-use" class="headerlink" title="Factor 1b: changing nonstandard tree use"></a>Factor 1b: <em>changing</em> nonstandard tree use</h3><p>At <a href="https://unicode-org.atlassian.net/browse/ICU-12800" target="_blank" rel="noopener">some point in 2016</a> we decided that it was a good idea (and it was) to merge the trees. ICU for C and J are really developed together, and there is important interlock between the two regarding generated data files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">trunk/</span><br><span class="line">    icu4c/</span><br><span class="line">    icu4j/</span><br><span class="line">tags/</span><br><span class="line">    release-1.2.3/</span><br><span class="line">        icu4c/</span><br><span class="line">        icu4j</span><br><span class="line">branches/</span><br><span class="line">    srl/</span><br><span class="line">        coolFeature/</span><br><span class="line">            icu4c/</span><br><span class="line">            icu4j/</span><br></pre></td></tr></table></figure><p>So far so good, but this point of discontinuity confuses the standard migration tools.</p><h3 id="Factor-1c-accidental-tree-deletion"><a href="#Factor-1c-accidental-tree-deletion" class="headerlink" title="Factor 1c: accidental tree deletion"></a>Factor 1c: accidental tree deletion</h3><p>Mistakes happen. But, this one means it looks like all source was deleted and replaced.</p><h3 id="Factor-2-large-jar-files"><a href="#Factor-2-large-jar-files" class="headerlink" title="Factor 2: large .jar files"></a>Factor 2: large .jar files</h3><p>Each .jar file ins&#39;t very big by itself. But ICU4J has a binary copy of its data file checked in. But there are thousands of copies of the icudata and other jars in the svn history. When all the dust settled, we probably end up with 2.3G of <a href="https://git-lfs.github.com" target="_blank" rel="noopener">git lfs</a> in 600 objects.</p><h2 id="trac-to-JIRA"><a href="#trac-to-JIRA" class="headerlink" title="trac to JIRA"></a>trac to JIRA</h2><p>The trac to JIRA importer was not available to us (not available in JIRA cloud anymore). CSV import seemed very unwieldy, as we needed to be able to incrementally update the issues a we were developing the mapping. Plus, our trac instance has many customizations, with source patches (yes, contributed back where they made sense) and <a href="https://github.com/unicode-org/icu-trac-tools" target="_blank" rel="noopener">a custom plugin</a> that powered our workflow.</p><h1 id="solutions-tries-retries…"><a href="#solutions-tries-retries…" class="headerlink" title="solutions, tries, retries…"></a>solutions, tries, retries…</h1><ul><li>The ICU team has been seriouly discussing a move to some form of DVCS since early 2016.</li><li>in December 2017, with management approval to spend the necessary engineering time in 2018, I informed the ICU-TC:</li></ul><blockquote><p>By the end of 2Q2018, let&#39;s call it 2018-06-30T23:59:59.999Z, my infrastructure involvement in ICU needs to go to zero. This means no root logins…</p><p>Note, I&#39;m only talking about infrastructure, not other project involvement.</p></blockquote><ul><li>By May, 2018 we had narrowed down what the future direction should look like.</li><li>In June 2018, the ICU-TC decided to go ahead with the migration as planned.</li></ul><h2 id="svn-to-git-1"><a href="#svn-to-git-1" class="headerlink" title="svn to git"></a>svn to git</h2><p>Subgit works quite well. It takes some time, but it is worth it for a configurable conversion.  However, it would not handle the discontinuities mentioned above.</p><p>I knew that Subversion has a <a href="https://stackoverflow.com/a/1579482/185799" target="_blank" rel="noopener">dump format</a>. Perhaps it would be possible to manipulate the dump, to make it look like ICU had <em>always</em> had a &#39;merged tree&#39;, and then import from there?  ICU’s dumpfile is about 20 Gb.</p><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/srl295/status/1006629782337929216" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>I found some stack overflow questions that didn&#39;t quite match what I needed. I ran across <a href="https://metacpan.org/release/SALVA/SVN-DumpReloc-0.02" target="_blank" rel="noopener">SVN::DumpReloc</a> in CPAN, and noted it for future reference. It didn’t work out of the box.</p><p>The challenge is that the svn dump is just a simple dump of the internal binary deltas. It does not take well to mkdir or copies with no intermediate dirs. So, simply renaming <code>/icu/trunk/source/common/uloc.cpp</code> to <code>/trunk/icu4c/source/common/uloc.cpp</code> in old revisions won’t work, because <code>/trunk</code> didn&#39;t exist until 2016.</p><h3 id="node-all-the-things"><a href="#node-all-the-things" class="headerlink" title="node all the things?"></a>node all the things?</h3><p>As usual, I reached for <code>npm init -q -y</code> and started off to write a processor for the svn dump. I learned how to implement a Duplex stream, and got <a href="https://github.com/unicode-org/icu-remunge-svndump/tree/984e51003675d6c16201d74fd82ba1a5110b9e7f#theory" target="_blank" rel="noopener">a little ways</a> but definitely not far enough:</p><ul><li>I tried to load the entire dumpfile into memory</li><li>I started in String space, assuming utf-8, whereas the svn dump is a mix of ASCII control headers (RFC 822) and binary blobs of arbitrary size.</li><li>And, it just plain didn’t work without making the dumpfile unloadable.</li></ul><h3 id="perl-comes-through-again"><a href="#perl-comes-through-again" class="headerlink" title="perl comes through (again)"></a>perl comes through (again)</h3><img src="/2018/07/02/icu-infra/perlref.jpg" title="Vromans, Johan. Perl: Pocket Reference. Sebastopol: O’Reilly, 2002."><p>I dusted off my <a href="http://www.worldcat.org/title/perl-pocket-reference/oclc/474715752" target="_blank" rel="noopener">perl pocket reference</a> and even-dustier perl skills and set out to update <a href="https://metacpan.org/release/SALVA/SVN-DumpReloc-0.02" target="_blank" rel="noopener">SVN::DumpReloc</a>.   Unlike my js code, the perl actually worked. And working is good here.</p><p>I ended up adding a simple [JSON configuration structure(<a href="https://github.com/unicode-org/icu-remunge-svndump/blob/master/icureloc.json" target="_blank" rel="noopener">https://github.com/unicode-org/icu-remunge-svndump/blob/master/icureloc.json</a>) that would do three things:</p><ul><li>create <code>/trunk</code>, <code>/branches</code>, <code>/tags</code> in revision <code>r1</code> where we should have created them.</li><li>make sure the future attempts to create those dirs gets ignored - by changing <code>add</code> to <code>change</code> (no-op property change).</li><li>run all paths through some regexes to fix the paths up just right.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"map"</span>: [</span><br><span class="line">        [ <span class="string">"^(icu4j|tools)\\/(trunk)\\/(.+)$"</span>, <span class="string">"\"$2\\/$1\\/$3\""</span>],</span><br><span class="line">        [ <span class="string">"^(icu4j|tools)\\/(trunk)$"</span>, <span class="string">"\"$2\\/$1\""</span>],</span><br><span class="line">        [ <span class="string">"^(icu)\\/(trunk)\\/(.+)$"</span>, <span class="string">"\"$2\\/icu4c\\/$3\""</span>],</span><br><span class="line">        [ <span class="string">"^(icu)\\/(trunk)$"</span>, <span class="string">"\"$2\\/icu4c\""</span>],</span><br><span class="line">        [ <span class="string">"^(icu|icu4j|tools)\\/(tags|branches)\\/(.*)$"</span>, <span class="string">"\"$2\\/$1-$3\""</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"r1"</span>: &#123;</span><br><span class="line">        <span class="attr">"mkdir"</span>: [</span><br><span class="line">            <span class="string">"/trunk"</span>,</span><br><span class="line">            <span class="string">"/branches"</span>,</span><br><span class="line">            <span class="string">"/tags"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the end, it worked.  A few bugs remained:  branches and tags pre/post merge aren&#39;t quite where we want them. But the bulk of the svn history is kept.</p><h2 id="JIRA-and-bugs-everywhere"><a href="#JIRA-and-bugs-everywhere" class="headerlink" title="JIRA and, bugs everywhere."></a>JIRA and, bugs everywhere.</h2><p>Given the above restrictions, I created a new node.js tool, <a href="https://github.com/unicode-org/icu-trac2jira" target="_blank" rel="noopener">https://github.com/unicode-org/icu-trac2jira</a> to migrate a trac .sqlite3 dump to a JIRA database— by using the REST API. With a <a href="https://github.com/unicode-org/icu-trac2jira/blob/master/config.json" target="_blank" rel="noopener">minimum of configuration</a> it is able to map all of the fields, wiki syntax, and attachments needed to preserve our issue history. It&#39;s not perfect, and there&#39;s work to be done to fix some of the values, but I think it got the job done as far as initial migration.</p><p>The interesting thing, process-wise, is that I ended up with something that could run <em>incrementally</em> to update JIRA to match trac. So as there was feedback on errors in the wiki syntax conversion, I could re-run the tool over a subset of the tickets and it would either update a ticket, comment, etc. or cause no change depending on whether JIRA matched the expected results.</p><p>A separate script created 20,000 empty tickets in a block, before running this converter. This allowed us to keep the same ticket IDs between trac and jira.</p><h1 id="Haven’t-we-done-this-before"><a href="#Haven’t-we-done-this-before" class="headerlink" title="Haven’t we done this before?"></a>Haven’t we done this before?</h1><p><a href="http://icu-project.org" target="_blank" rel="noopener">http://icu-project.org</a> was already the third external web host for ICU, after <a href="http://web.archive.org/web/20011104161753/http://www.jtcsv.com:80/" target="_blank" rel="noopener">jtcsv.com</a> (2001 mirror) and <a href="http://web.archive.org/web/20040209035756/oss.software.ibm.com/icu" target="_blank" rel="noopener">oss.software.ibm.com/icu</a> (2004 mirror).</p><p>In 2006 I migrated ICU from cvs and <a href="https://www.samba.org/jitterbug/" target="_blank" rel="noopener">JitterBug</a> to svn and trac. So yes, we&#39;ve done this before!</p><img src="/2018/07/02/icu-infra/icubugtracking.png" title="ICU Trac logo by Syn Wee"><p>JitterBug (which I also customized extensively and added new report CGIs to) had a very simple hierarchical file structure which was very hackable. Since trac used a sqlite database, I wrote source to read this file structure and emit SQL to recreate the bugs in the new form.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jb2svn.c</span></span><br><span class="line">    <span class="keyword">switch</span>(<span class="built_in">tolower</span>(s[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'['</span>: <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'a'</span>: <span class="keyword">return</span> <span class="string">"assess"</span>; <span class="comment">// @@ assess?</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'c'</span>: </span><br><span class="line">        <span class="keyword">switch</span>(<span class="built_in">tolower</span>(s[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'r'</span>: <span class="keyword">return</span> <span class="string">"critical"</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'o'</span>: <span class="keyword">return</span> <span class="string">"critical"</span>; <span class="comment">// @@ Committed?</span></span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">return</span> def?def:s;</span><br><span class="line">        &#125;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">return</span> <span class="string">"major"</span>; <span class="comment">// expected</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'m'</span>: <span class="keyword">return</span> <span class="string">"minor"</span>; <span class="comment">// medium</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'l'</span>: <span class="keyword">return</span> <span class="string">"trivial"</span>; <span class="comment">// medium</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'h'</span>: <span class="keyword">return</span> <span class="string">"major"</span>; <span class="comment">// high</span></span><br></pre></td></tr></table></figure><p>An oddity of that conversion is that I sort of punted on converting the date fields at all. Maybe there either wasn&#39;t a ticket-creation time, or the files had all been re-<code>touch</code>ed at some point. Or maybe it was just… laziness. Or whatever the other two are (I&#39;d have to look it up).</p><img src="/2018/07/02/icu-infra/tractime0.png" title="Changed 49 years ago by auditor"><p>Of course, our conversion process faithfully preserves this history. I think <code>1970-01-01T00:00:28.000Z</code> is due to wanting a unique timestamp for some reason, thus (epoch time + 1 second per bug)-ish?</p><img src="/2018/07/02/icu-infra/tractime1.png" title="Changed in 1970 by auditor">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Well, it’s done. As of &lt;a href=&quot;https://time.is/2359_30_Jun_2018_in_UTC?SRL_icu-infrastructure_EOL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the en
      
    
    </summary>
    
    
      <category term="node" scheme="https://srl295.github.io/tags/node/"/>
    
      <category term="icu" scheme="https://srl295.github.io/tags/icu/"/>
    
      <category term="unicode" scheme="https://srl295.github.io/tags/unicode/"/>
    
      <category term="perl" scheme="https://srl295.github.io/tags/perl/"/>
    
      <category term="scm" scheme="https://srl295.github.io/tags/scm/"/>
    
  </entry>
  
  <entry>
    <title>The Promise that Never Returned</title>
    <link href="https://srl295.github.io/2017/09/21/promise-never-returned/"/>
    <id>https://srl295.github.io/2017/09/21/promise-never-returned/</id>
    <published>2017-09-22T02:12:50.000Z</published>
    <updated>2020-05-22T00:10:18.509Z</updated>
    
    <content type="html"><![CDATA[<p>Let me tell you the story<br>Of a Promise named Charlie,<br>On an un Exceptional day.<br>He put ten strings on the socket,<br>reniced some child process<br>then <a href="https://npmjs.com/package/mbta/" target="_blank" rel="noopener"><code>require(&#39;mbta&#39;)</code></a></p><p><em>Chorus</em><br>Did he ever resolve,<br>No he never resolved<br>and his fate is still unsolv’d<br>He’s been <code>&lt;pending&gt;</code> forever<br>on that un-called closure<br>He’s the Promise that never resolved</p><p>Charlie yielded his time<br>somewhere down in <code>libuv</code><br>and he queued in<br>th’event loop main.<br>When he got called the constructor told him<br>“one more bracket”<br>Charlie couldn’t reach <code>then()</code> again</p><p>“Only one more build,”<br>said the rock star coder<br>“I’ll replace four lines with three”<br>But, alas, <code>git merge</code><br>of the branch to <code>master</code><br>And the Promise sailed out to sea!<br></p><p>Oh the DevOps ninja<br>Reboots the build in production<br>Every day at quarter past two<br>And through the open window<br>Charlie’s newlines are sandwiched<br>As the log goes rumbling through!<br></p><p><em>Lyrics: Steven R. Loomis 2017, Parody of: “<a href="http://www.mit.edu/~jdreed/t/charlie.html" target="_blank" rel="noopener">M.T.A.</a>” words by Jacqueline Steiner, Bess Lomax-Hawes (1949) which is itself based on “<a href="https://www.loc.gov/item/ihas.100004005/" target="_blank" rel="noopener">The Ship That Never Returned</a>” by author and composer Henry Clay Work (1865).</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let me tell you the story&lt;br&gt;
Of a Promise named Charlie,&lt;br&gt;
On an un Exceptional day.&lt;br&gt;
He put ten strings on the socket,&lt;br&gt;
reniced
      
    
    </summary>
    
    
      <category term="node" scheme="https://srl295.github.io/tags/node/"/>
    
      <category term="javascript" scheme="https://srl295.github.io/tags/javascript/"/>
    
      <category term="promises" scheme="https://srl295.github.io/tags/promises/"/>
    
  </entry>
  
  <entry>
    <title>Full Stack Language Enablement</title>
    <link href="https://srl295.github.io/2017/06/06/full-stack-enablement/"/>
    <id>https://srl295.github.io/2017/06/06/full-stack-enablement/</id>
    <published>2017-06-06T16:04:49.000Z</published>
    <updated>2020-05-22T00:10:18.488Z</updated>
    
    <content type="html"><![CDATA[<p><em>This has been a working document for a while. I am publishing it here so that it can serve for more public discussion. Thank you to Co-authors:  Anshuman Pandey, Isabelle Zaugg. Also thanks to others have discussed these items over the years such as Martin Raymond.</em></p><blockquote><p><strong>Edit 2018-07-10</strong> I have added some further references at the end.</p></blockquote><img src="/2017/06/06/full-stack-enablement/stackbooks.jpg" title="a “full stack” of resources"><p><strong>Introduction</strong></p><p>There are a lot of steps to be taken in order to ensure that a language is fully supported. The objective of this document is to collect the steps needed and begin to plan how to accomplish them for particular languages. The intent is for this to serve as a guide to language community members and other interested parties in how to improve the support for a particular language.</p><p><strong><em>Metrics</em></strong></p><p>The diagram below shows languages in one axis, and the “stack” of support tasks on the other. </p><img src="/2017/06/06/full-stack-enablement/support.png" title="Language vs the “Support Stack”"><ul><li>Typographic support matrix: <a href="https://w3c.github.io/typography/gap-analysis/language-matrix.html#reference" target="_blank" rel="noopener">W3C’s Language matrix</a></li><li>Locale support matrix: <a href="https://www.unicode.org/cldr/charts/latest/supplemental/locale_coverage.html" target="_blank" rel="noopener">CLDR Coverage</a></li></ul><p>Coordination is key. Finding and communicating with the right people is often at least as difficult as the technical aspects.  <a href="http://scriptsource.org" target="_blank" rel="noopener">ScriptSource</a> can be a good “central hub” to collect/publish information and needs for a user community.</p><p><strong>Encoding</strong></p><p>A critical step is of course <a href="http://unicode.org" target="_blank" rel="noopener">Unicode</a> encoding, but that is only the first step. Also, there can be (through no fault of anyone’s) a long gap between the first contact with a user community and the publication of a Unicode version supporting that language, not to mention other steps. The <a href="http://linguistics.berkeley.edu/sei/index.html" target="_blank" rel="noopener">Script Encoding Initiative</a> at UC Berkeley works closely with language communities working to encode their scripts in Unicode. </p><p>In the course of the encoding process, a lot of information is gathered which is relevant to other steps such as grammatical considerations and best practices around font and layout support.</p><ul><li>Standardizing of the script ideally/typically happens before Unicode inclusion, but sometimes this can hold up Unicode inclusion, or be an ongoing challenge if it is incomplete after Unicode inclusion.  Standardization of the script, as well as the orthography, are very helpful for digital vitality in general, as a standardized orthography helps “search” to work well, for example.  </li></ul><p><strong>Font</strong></p><p>From Martin Raymond:</p><blockquote><p>One recommendation is to split the drawing of the glyphs from the more technical aspects of font design. Someone familiar with the writing can draw the letter shapes and pass them on to a font designer to develop the font.</p></blockquote><p>In other words, the critical <em>initial</em> step is to get the correct glyphs from the user community.</p><p>Note that there is a need for fonts for different purposes:  aesthetic, low resolution, small devices.</p><p><strong>Layout</strong></p><p>Determine if layout requirements are “complex” or not. (See the “shaping required” field of <a href="http://unicode.org/repos/cldr/trunk/common/properties/scriptMetadata.txt" target="_blank" rel="noopener">CLDR Script Metadata</a>).</p><p>Support through W3C’s Layout &amp; Typography project:  <a href="https://www.w3.org/International/layout" target="_blank" rel="noopener">https://www.w3.org/International/layout</a></p><ul><li>From website:  “The W3C needs to make sure that the text layout and typographic needs of scripts and languages around the world are built in to technologies such as HTML, CSS, SVG, etc. so that Web pages and eBooks can look and behave as people expect around the world.”</li></ul><p>The <a href="https://github.com/unicode-org/text-rendering-tests#supported-platforms" target="_blank" rel="noopener">text-rendering tests</a> can be useful to determine if OpenType font rendering is correct.</p><p><strong>OS-level support</strong></p><ul><li>Desktop support</li><li>Mobile support (possibly even more important than desktop for global minority scripts)</li></ul><p><strong>Input</strong></p><ul><li>Keyboard<ul><li>Virtual keyboards for mobile devices</li><li>Managing repertoire (Unihan, etc)</li><li>Transliteration standard into Latin script (This is helpful for input when a keyboard supporting the target script is unavailable.) </li></ul></li></ul><p><strong>Locale Data</strong></p><p><a href="http://cldr.unicode.org" target="_blank" rel="noopener">CLDR</a> seed/initial data (see <a href="http://cldr.unicode.org/index/cldr-spec/minimaldata" target="_blank" rel="noopener">CLDR Minimal Data</a>)</p><ul><li>Needed: an app to collect initial data (a true “Survey Tool”)</li><li>Within CLDR: Promote from “seed” to “common” as data matures</li><li>Verify deployment (inclusion in JSON data, ICU, Globalize, etc.) <ul><li>Code changes may be needed, such as calendar and new date/time support, line breaking, etc.</li></ul></li></ul><p><strong>Software Translation</strong></p><ul><li>Various parts of <a href="https://www.wikimedia.org" target="_blank" rel="noopener">Wikimedia</a> community.</li><li><a href="http://translatewiki.net" target="_blank" rel="noopener">http://translatewiki.net</a>, others - translate open source software.</li><li>Community translation of sites (Various OSS/commercial items which support crowdsourced data…)</li><li>Commercial translation environments such as <a href="https://developer.ibm.com/open/openprojects/ibm-bluemix-globalization-pipeline/" target="_blank" rel="noopener">Globalization Pipeline</a></li></ul><p><strong>Advanced NLP (Natural Language Processing)</strong></p><p>The development of many NLP applications requires large digital corpora, the collection of which is a project in itself.  Even when corpora are collected, say through web crawling, when they are not available publicly, other developers cannot benefit from them as a resource. Therefore, a freely available repository of digital resources in a target language, to which contributors can add, is an ideal first step for the following efforts.</p><ul><li>OCR</li><li>Spell checking</li><li>Auto-correction, Auto-suggestion, Auto-fill</li><li>Parsing &amp; Stemming (helps search to happen with related terms)</li><li>Language glossaries/dictionaries/thesauri</li><li>Search capacity within word documents &amp; pdfs</li><li>Translation:  Ideally not just dominant language to minority language, but also minority to minority language (for maximum use within countries that enjoy a high level of language diversity)</li><li>Natural language queries and conversation</li></ul><p><strong>App-Level Support</strong></p><p>This means going beyond:</p><ul><li>Multilingual readiness (Unicode support: “Don’t garble my text”)</li><li>Leverage locale data and implementations (ICU, etc.)</li><li>Translation (above)</li></ul><p>…to truly supporting language specific features. Some examples:</p><ul><li>Arabic and East Asian advanced typography</li><li>NLP support as above</li></ul><p><strong>ICANN / IDN support</strong></p><p>Support for a script within top-level domains allows an important level of localization online that breaks from the historically Latin-only top level domains and reflects the truly international nature of the Internet. <a href="http://www.icann.org/en/resources/idn" target="_blank" rel="noopener">ICANN</a> has made significant progress in this area, and is currently in the process of working with language communities to define rules for using many new scripts in TLDs (top level domains).</p><p><strong>Computer programming language in mother tongue</strong></p><p>While this may seem a far-fetched dream today, the fact that programming languages are in English is a barrier to the full use of digital tools by much of the world’s population.  This might be the final frontier for the internationalization/localization of digital technologies. “<a href="https://en.wikipedia.org/wiki/Qalb_(programming_language)" target="_blank" rel="noopener">قلب</a>” is an example of a programming language entirely in Arabic.</p><p><strong>References</strong></p><ul><li><a href="http://cldr.unicode.org" target="_blank" rel="noopener">Unicode CLDR</a> and <a href="http://cldr.unicode.org/index/cldr-spec/minimaldata" target="_blank" rel="noopener">CLDR Minimal Data for New Locales</a></li><li><a href="http://www.icann.org/en/resources/idn" target="_blank" rel="noopener">ICANN: IDNS</a> (see also <a href="http://idnworldreport.eu/introduction-to-idns/" target="_blank" rel="noopener">Introduction to IDNs</a>)</li><li><a href="http://scriptsource.org" target="_blank" rel="noopener">ScriptSource</a></li><li><a href="http://linguistics.berkeley.edu/sei/index.html" target="_blank" rel="noopener">Script Encoding Initiative</a></li><li><a href="https://github.com/unicode-org/text-rendering-tests#supported-platforms" target="_blank" rel="noopener">Unicode Text Rendering Tests</a></li><li><a href="http://unicode.org" target="_blank" rel="noopener">Unicode</a></li><li><a href="https://www.w3.org/International/layout" target="_blank" rel="noopener">W3C International and Typography</a></li><li><a href="https://w3c.github.io/typography/gap-analysis/language-matrix.html#reference" target="_blank" rel="noopener">W3C International Typography Language Matrix</a></li><li><a href="https://www.unicode.org/cldr/charts/latest/supplemental/locale_coverage.html" target="_blank" rel="noopener">CLDR Coverage Map</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;This has been a working document for a while. I am publishing it here so that it can serve for more public discussion. Thank you to C
      
    
    </summary>
    
    
      <category term="g11n" scheme="https://srl295.github.io/tags/g11n/"/>
    
      <category term="locales" scheme="https://srl295.github.io/tags/locales/"/>
    
  </entry>
  
  <entry>
    <title>Announcing 🌲 pino-couch</title>
    <link href="https://srl295.github.io/2017/06/02/pino-couch/"/>
    <id>https://srl295.github.io/2017/06/02/pino-couch/</id>
    <published>2017-06-02T21:55:40.000Z</published>
    <updated>2020-05-22T00:10:18.507Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/pino-couch" target="_blank" rel="noopener"><img src="https://badge.fury.io/js/pino-couch.svg" alt="latest on npm"></a></p><p>Today I’m pleased to release <a href="https://www.npmjs.com/package/pino-couch" target="_blank" rel="noopener">pino-couch</a>. You can find it on GitHub under <a href="https://github.com/IBM/pino-couch" target="_blank" rel="noopener">https://github.com/IBM/pino-couch</a>.</p><p>This little module is a <a href="https://github.com/pinojs/pino/blob/master/docs/transports.md#transports" target="_blank" rel="noopener">transport</a> which lets you capture your <a href="https://github.com/pinojs/pino" target="_blank" rel="noopener">pino</a> logs into any <a href="https://couchdb.apache.org" target="_blank" rel="noopener">CouchDB</a> database.</p><h2 id="Why-pino"><a href="#Why-pino" class="headerlink" title="Why pino?"></a>Why pino?</h2><ul><li><p>Speed: I haven’t independently tested the <a href="https://github.com/pinojs/pino#benchmarks" target="_blank" rel="noopener">benchmarks</a>, but I really like logging that doesn’t slow down the application. I want to be able to sprinkle logging generously in the application without slowing it down.</p></li><li><p>Simplicity: Take a look at the example below. We go from logging to the console, to logging in a database. The configuration and execution of log processing is entirely <em>outside</em> of the application.</p></li><li><p>Sticker: Because it has a logo that looks nice on a hex sticker? OK, not really. But <a href="https://twitter.com/matteocollina" target="_blank" rel="noopener">@matteocollina</a> presented this logger so effectively at NodeSummit, I asked for a sticker. Today, I’m glad to give something back to the community.</p></li></ul><h2 id="Taking-it-for-a-spin"><a href="#Taking-it-for-a-spin" class="headerlink" title="Taking it for a spin"></a>Taking it for a spin</h2><h3 id="First-steps-with-pino"><a href="#First-steps-with-pino" class="headerlink" title="First steps with pino"></a>First steps with pino</h3><p>Let’s do a quick demo here, with a simple app that emits some logs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd somewhere</span><br><span class="line">$ npm init -q -y</span><br><span class="line">$ npm install --save pino</span><br></pre></td></tr></table></figure><p>And for <code>index.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pino = <span class="built_in">require</span>(<span class="string">'pino'</span>)();</span><br><span class="line">pino.error(<span class="string">'Something bad happened!'</span>);</span><br><span class="line">pino.warn(&#123; <span class="attr">iToldYou</span>: [ <span class="string">'once'</span>, <span class="string">'twice'</span>, <span class="string">'thrice'</span> ]&#125;);</span><br><span class="line">pino.info(&#123; <span class="attr">msg</span>: <span class="string">"Hey, check out these versions"</span>, <span class="attr">versions</span>: <span class="built_in">require</span>(<span class="string">'process'</span>).versions &#125;);</span><br><span class="line">pino.trace(<span class="string">'ALL THE DETAILS'</span>);</span><br></pre></td></tr></table></figure><p>With the nice <a href="https://github.com/pinojs/pino/blob/master/docs/API.md" target="_blank" rel="noopener">pino API</a> you have lots of options for emitting logs.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js </span><br><span class="line">&#123;<span class="string">"pid"</span>:<span class="number">54534</span>,<span class="string">"hostname"</span>:<span class="string">"filfla.local"</span>,<span class="string">"level"</span>:<span class="number">50</span>,<span class="string">"time"</span>:<span class="number">1496436803976</span>,<span class="string">"msg"</span>:<span class="string">"Something bad happened!"</span>,<span class="string">"v"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"pid"</span>:<span class="number">54534</span>,<span class="string">"hostname"</span>:<span class="string">"filfla.local"</span>,<span class="string">"level"</span>:<span class="number">40</span>,<span class="string">"time"</span>:<span class="number">1496436803979</span>,<span class="string">"iToldYou"</span>:[<span class="string">"once"</span>,<span class="string">"twice"</span>,<span class="string">"thrice"</span>],<span class="string">"v"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"pid"</span>:<span class="number">54534</span>,<span class="string">"hostname"</span>:<span class="string">"filfla.local"</span>,<span class="string">"level"</span>:<span class="number">30</span>,<span class="string">"time"</span>:<span class="number">1496436803979</span>,<span class="string">"msg"</span>:<span class="string">"Hey, check out these versions"</span>,<span class="string">"versions"</span>:&#123;<span class="string">"http_parser"</span>:<span class="string">"2.7.0"</span>,<span class="string">"node"</span>:<span class="string">"8.0.0"</span>,<span class="string">"v8"</span>:<span class="string">"5.8.283.41"</span>,<span class="string">"uv"</span>:<span class="string">"1.11.0"</span>,<span class="string">"zlib"</span>:<span class="string">"1.2.11"</span>,<span class="string">"ares"</span>:<span class="string">"1.10.1-DEV"</span>,<span class="string">"modules"</span>:<span class="string">"57"</span>,<span class="string">"openssl"</span>:<span class="string">"1.0.2k"</span>,<span class="string">"icu"</span>:<span class="string">"59.1"</span>,<span class="string">"unicode"</span>:<span class="string">"9.0"</span>,<span class="string">"cldr"</span>:<span class="string">"31.0.1"</span>,<span class="string">"tz"</span>:<span class="string">"2017b"</span>&#125;,<span class="string">"v"</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>Notice the <code>trace()</code> details were below the current <a href="https://github.com/pinojs/pino/blob/master/docs/API.md#level" target="_blank" rel="noopener">level</a>, so were omitted. This is detailed, but not super readable. If you are running something from the commadn line, the <code>pino</code> global utility tidies up the output nicely—in color, even, if your console supports it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g pino</span><br><span class="line">$ node index.js | pino</span><br><span class="line">[2017-06-02T20:56:12.125Z] ERROR (56035 on filfla.local): Something bad happened!</span><br><span class="line">[2017-06-02T20:56:12.128Z] WARN (56035 on filfla.local): </span><br><span class="line">    iToldYou: [</span><br><span class="line">      &quot;once&quot;,</span><br><span class="line">      &quot;twice&quot;,</span><br><span class="line">      &quot;thrice&quot;</span><br><span class="line">    ]</span><br><span class="line">[2017-06-02T20:56:12.128Z] INFO (56035 on filfla.local): Hey, check out these versions</span><br><span class="line">    versions: &#123;</span><br><span class="line">      &quot;http_parser&quot;: &quot;2.7.0&quot;,</span><br><span class="line">      &quot;node&quot;: &quot;8.0.0&quot;,</span><br><span class="line">      &quot;v8&quot;: &quot;5.8.283.41&quot;,</span><br><span class="line">      &quot;uv&quot;: &quot;1.11.0&quot;,</span><br><span class="line">      &quot;zlib&quot;: &quot;1.2.11&quot;,</span><br><span class="line">      &quot;ares&quot;: &quot;1.10.1-DEV&quot;,</span><br><span class="line">      &quot;modules&quot;: &quot;57&quot;,</span><br><span class="line">      &quot;openssl&quot;: &quot;1.0.2k&quot;,</span><br><span class="line">      &quot;icu&quot;: &quot;59.1&quot;,</span><br><span class="line">      &quot;unicode&quot;: &quot;9.0&quot;,</span><br><span class="line">      &quot;cldr&quot;: &quot;31.0.1&quot;,</span><br><span class="line">      &quot;tz&quot;: &quot;2017b&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Persistence-without-Perspiration-Relax"><a href="#Persistence-without-Perspiration-Relax" class="headerlink" title="Persistence without Perspiration: Relax!"></a>Persistence without Perspiration: Relax!</h3><p>Here’s where <code>pino-couch</code> comes in. I’m going to set up a <a href="Cloudant">https://cloudant.com</a> databaseto store these logs (as I do in production), but you can also use a local or any other <code>couchdb</code> instance (as I do when developing locally).</p><ul><li>First, create a database</li></ul><img src="/2017/06/02/pino-couch/createdb.png"><ul><li>Next, give appropriate permissions.</li></ul><p><code>pino-couch</code> only needs to write to the database, it doesn’t need to read. Click the <em>Permissions</em> tab, then <em>Generate API Key</em>.  Choose only the <code>_writer</code> column for our new API key.</p><img src="/2017/06/02/pino-couch/permissdb.png"><p>That’s actually it for configuration.</p><ul><li>Start up our app, but using <code>pino-couch</code>.   Use the <em>APIKEY</em> and <em>PASSWORD</em> that were generated above. And of course, your own <em>ACCOUNT</em>.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g pino-couch</span><br><span class="line">$ node index.js | pino-couch -U https://APIKEY:PASSWORD@ACCOUNT.cloudant.com -d slogging | pino</span><br><span class="line">[2017-06-02T21:16:22.511Z] ERROR (68283 on filfla.local): Something bad happened!</span><br><span class="line">( etc… )</span><br></pre></td></tr></table></figure><ul><li>The output is about the same.  We chained on a <code>| pino</code> at the end to keep the output human-readable— that&#39;s optional.</li></ul><p>Let’s take a look at the Cloudant dashboard again:</p><img src="/2017/06/02/pino-couch/readdb.png"><p>There’s our data!</p><h2 id="So-now-what"><a href="#So-now-what" class="headerlink" title="So now what?"></a>So now what?</h2><p>Here are a couple of things you might do with your new logging pipeline:</p><h3 id="Write-a-clever-design-document-to-mine-your-app-logs-for-important-stuff"><a href="#Write-a-clever-design-document-to-mine-your-app-logs-for-important-stuff" class="headerlink" title="Write a clever design document to mine your app logs for important stuff."></a>Write a clever design document to mine your app logs for important stuff.</h3><p>Even something as simple as the following will get you timestamp-ordered documents.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">doc</span>) </span>&#123;</span><br><span class="line">    emit([<span class="keyword">new</span> <span class="built_in">Date</span>(doc.time).toISOString(),doc._id], doc.msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that besides the <code>time</code> field with epoch time, <code>hostname</code> contains the current hostname. This is really useful for distinguishing logs from among a cluster of servers.</p><h3 id="Ingest-the-data-into-Elasticsearch-Kibana"><a href="#Ingest-the-data-into-Elasticsearch-Kibana" class="headerlink" title="Ingest the data into Elasticsearch/Kibana"></a>Ingest the data into Elasticsearch/Kibana</h3><p>We’ve done this with great success. We were already pulling from another Cloudant DB, so it was easy to add the application logs.</p><p>And of course:</p><h3 id="Relax"><a href="#Relax" class="headerlink" title="Relax"></a>Relax</h3><img src="/2017/06/02/pino-couch/pinohex.jpg" title="🌲: +1!">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/pino-couch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/pino-couch.svg&quot; alt=
      
    
    </summary>
    
    
      <category term="node" scheme="https://srl295.github.io/tags/node/"/>
    
      <category term="pino" scheme="https://srl295.github.io/tags/pino/"/>
    
      <category term="opensource" scheme="https://srl295.github.io/tags/opensource/"/>
    
  </entry>
  
  <entry>
    <title>Translating Kibana with the Globalization Pipeline</title>
    <link href="https://srl295.github.io/2017/03/17/translating-kibana/"/>
    <id>https://srl295.github.io/2017/03/17/translating-kibana/</id>
    <published>2017-03-17T17:25:41.000Z</published>
    <updated>2020-05-22T00:10:18.515Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/fI9iuXWYHfI" frameborder="0" allowfullscreen></iframe></div><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><img src="/2017/03/17/translating-kibana/kibana0.png"><p>This post (and video) will explain how to translate Kibana using the Globalization Pipeline service on Bluemix. Note that some of the steps shown here depend on <a href="https://github.com/elastic/kibana/pull/8766" target="_blank" rel="noopener">kibana:8766</a> which was not merged as this article went to press. (Portions are based on the <code>development-internationalization.asciidoc</code> document from that PR.)</p><h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><ul><li><p>Kibana — for now, I am using the <a href="https://github.com/hickeyma/kibana/tree/i18n_phase2" target="_blank" rel="noopener">i18n_phase2</a> branch from <a href="https://github.com/elastic/kibana/pull/8766" target="_blank" rel="noopener">kibana:8766</a>. - <a href="https://github.com/elastic/kibana/commit/91f27f69a03eb74f4a84d2f628b8f5584b9d2a70" target="_blank" rel="noopener">91f27f69a03eb74f4a84d2f628b8f5584b9d2a70</a> to be precise.  See Kibana’s READMEs for detailed setup instruction.</p></li><li><p>A <a href="https://bluemix.net" target="_blank" rel="noopener">Bluemix</a> account to access Globalization Pipeline. It&#39;s free to sign up!</p></li><li><p>Java and the latest <a href="https://github.com/IBM-Bluemix/gp-java-tools/releases" target="_blank" rel="noopener">gp-cli.jar</a> (Globalization Pipeline tools).</p></li></ul><h1 id="Setting-up-Globalization-Pipeline"><a href="#Setting-up-Globalization-Pipeline" class="headerlink" title="Setting up Globalization Pipeline"></a>Setting up Globalization Pipeline</h1><ul><li>Follow the GP <a href="https://github.com/IBM-Bluemix/gp-common#quick-start-guide" target="_blank" rel="noopener">Quick Start Guide</a> to create a service instance. Copy down the &quot;credentials&quot; into a new file, <code>gp-credentials.json</code> which should look something like the following:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"url"</span>: <span class="string">"https://gp-rest.bluemix.example.com/translate/rest"</span>,</span><br><span class="line"> <span class="attr">"userId"</span>: <span class="string">"c2lnbiB1cCBAIGJsdWVtaXgubmV0ISEK"</span>,</span><br><span class="line"> <span class="attr">"password"</span>: <span class="string">"aHVudGVyNDIK"</span>,</span><br><span class="line"> <span class="attr">"instanceId"</span>: <span class="string">"aHR0cHM6Ly9ibHVlbWl4Lm5ldCA8PDwK"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Create the bundle on the GP instance. The example below uses English (<code>en</code>) as the source langage and requests Spanish, Japanese, and French targets (<code>es,ja,fr</code>).</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar &#123;wherever&#125;/gp-cli.jar create-bundle  -j &#123;wherever&#125;/gp-credentials.json  -b <span class="string">'kibana_core'</span>  -l en,es,ja,fr</span><br><span class="line">A new bundle <span class="string">'kibana_core'</span> was successfully created.</span><br></pre></td></tr></table></figure><ul><li><p>The bundle will show up in the Bluemix dashboard under the service’s console, but as empty.</p></li><li><p>We are going to translate the <code>src/core_plugins/kibana/translations/en.json</code> file in Kibana. Upload that file to the Globalization Pipeline service using the command line:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/src/kibana</span><br><span class="line">$ java -jar &#123;wherever&#125;/gp-cli.jar import  -j &#123;wherever&#125;/gp-credentials.json  -b <span class="string">'kibana_core'</span> -l en -f src/core_plugins/kibana/translations/en.json -t json</span><br><span class="line">Resource data extracted from src/core_plugins/kibana/translations/en.json was successfully imported to bundle:kibana_core, language:en</span><br></pre></td></tr></table></figure><ul><li>If you head back over to the Bluemix dashboard, you can now see the populated bundle with translated content:</li></ul><img src="/2017/03/17/translating-kibana/gp-dash.png"><p>What you see was done with machine translation, hence the red “U” (Unreviewed). The content here can be corrected manually by clicking the Pencil icon, or marked as manually reviewed by clicking the Checkmark. It’s also possible to download the translated content for offline review or use, or to upload a corrected version of one of the translations.</p><p>Head back over to the command line, though, because it is time to create our plugin.</p><h1 id="Creating-the-plugin"><a href="#Creating-the-plugin" class="headerlink" title="Creating the plugin"></a>Creating the plugin</h1><ul><li>See <a href="https://github.com/elastic/generator-kibana-plugin" target="_blank" rel="noopener">https://github.com/elastic/generator-kibana-plugin</a> - create a <code>kibana-YOURNAME-translation-plugin</code> next to your <code>kibana</code> directory.</li></ul><p>Something like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g yo generator-kibana-plugin</span><br><span class="line">…</span><br><span class="line">Everything looks all right!</span><br><span class="line"></span><br><span class="line">$ yo kibana-plugin</span><br><span class="line">? Your Plugin Name gp srl kibana plugin</span><br><span class="line">? Short Description An awesome Kibana translation plugin</span><br><span class="line">? Target Kibana Version master</span><br><span class="line"></span><br><span class="line">I<span class="string">'m all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.</span></span><br></pre></td></tr></table></figure><ul><li>You will notice that the generator has created a <code>translations/es.json</code> file. We will replace this with our translated content.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm translations/es.json</span><br></pre></td></tr></table></figure><ul><li>Now, download the translated content into the correct files:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar &#123;wherever&#125;/gp-cli.jar <span class="built_in">export</span>  -j &#123;wherever&#125;/gp-credentials.json -b <span class="string">'kibana_core'</span> -t json -l es -f translations/es.json</span><br><span class="line">Resource data exported from bundle:kibana_core, language: es was successfully saved to file translations/es.json</span><br><span class="line"></span><br><span class="line">$ java -jar &#123;wherever&#125;/gp-cli.jar <span class="built_in">export</span>  -j &#123;wherever&#125;/gp-credentials.json -b <span class="string">'kibana_core'</span> -t json -l fr -f translations/fr.json</span><br><span class="line">Resource data exported from bundle:kibana_core, language: fr was successfully saved to file translations/fr.json</span><br><span class="line"></span><br><span class="line">$ java -jar &#123;wherever&#125;/gp-cli.jar <span class="built_in">export</span>  -j &#123;wherever&#125;/gp-credentials.json -b <span class="string">'kibana_core'</span> -t json -l ja -f translations/ja.json</span><br><span class="line">Resource data exported from bundle:kibana_core, language: ja was successfully saved to file translations/ja.json</span><br></pre></td></tr></table></figure><ul><li>Update the <code>index.js</code> file in the plugin to mention the updated <code>translations</code> files.</li></ul><p>You will see a section like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">translations: [</span><br><span class="line"> resolve(__dirname, <span class="string">'./translations/es.json'</span>)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>Change it to mention all of the language files we have just downloaded:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">translations: [</span><br><span class="line"> resolve(__dirname, <span class="string">'./translations/es.json'</span>),</span><br><span class="line"> resolve(__dirname, <span class="string">'./translations/ja.json'</span>),</span><br><span class="line"> resolve(__dirname, <span class="string">'./translations/fr.json'</span>)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><ul><li><p><em>That&#39;s all the coding we&#39;ll need for today…</em></p></li><li><p>Copy your entire translations plugin directory to the Kibana plugins (<code>&lt;kibana_root&gt;/plugins/</code>) directory</p></li></ul><h1 id="Trying-it-out"><a href="#Trying-it-out" class="headerlink" title="Trying it out"></a>Trying it out</h1><p>Fire up Kibana and you should see the translated content!</p><img src="/2017/03/17/translating-kibana/kibana1.png"><h1 id="More-steps"><a href="#More-steps" class="headerlink" title="More steps"></a>More steps</h1><ul><li><p>By the way, French isn’t included in the video or images becuase I ran into <a href="https://github.com/elastic/kibana/issues/10580" target="_blank" rel="noopener">kibana#10580</a> during the production of this video. When this is fixed I will come back and edit this video, but until then, beware single quotes (<code>&#39;</code>) in your translated strings.</p></li><li><p>Note that if you repeat the <code>import</code> and <code>export</code> steps of the <code>gp-cli</code> tool, the Globalization Pipeline will automatically manage translation changes if, for example, translated keys are added or removed, or translated content changes.</p></li><li><p>Follow the progress of Kibana Globalization on Github: <a href="https://github.com/elastic/kibana/issues/6515" target="_blank" rel="noopener">(kibana#6515)</a>.</p></li><li><p>Read more about <a href="https://console.ng.bluemix.net/docs/#services/GlobalizationPipeline/index.html" target="_blank" rel="noopener">Globalization Pipeline</a></p></li><li><p>Connect with the <a href="https://developer.ibm.com/open/openprojects/ibm-bluemix-globalization-pipeline/" target="_blank" rel="noopener">Globalization Pipeline Open Source Community</a></p></li></ul><h1 id="Acknowledgements"><a href="#Acknowledgements" class="headerlink" title="Acknowledgements"></a>Acknowledgements</h1><ul><li>Thanks to fellow IBMers Martin Hickey, Shikha Srivastava, and Jonathan Lo for the Kibana G11n work <a href="https://github.com/elastic/kibana/issues/6515" target="_blank" rel="noopener">(kibana#6515)</a>, also the <a href="https://github.com/elastic/kibana/" target="_blank" rel="noopener">elastic/kibana</a> team for being a great OSS community, and last but not least the entire Globalization Pipeline team.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/fI9iuXWYHfI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h1 id=&quot;Intr
      
    
    </summary>
    
    
      <category term="globalizationpipeline" scheme="https://srl295.github.io/tags/globalizationpipeline/"/>
    
      <category term="kibana" scheme="https://srl295.github.io/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>Literate Programmers</title>
    <link href="https://srl295.github.io/2017/02/07/literate-programmers/"/>
    <id>https://srl295.github.io/2017/02/07/literate-programmers/</id>
    <published>2017-02-07T16:45:44.000Z</published>
    <updated>2020-05-22T00:10:18.506Z</updated>
    
    <content type="html"><![CDATA[<p>Besides the Globalization Pipeline mug, one of my favorite coffee mugs says:</p><img src="/2017/02/07/literate-programmers/IMG_0010.jpg" title="03: MAKE IT POSSIBLE FOR PROGRAMMERS TO WRITE IN ENGLISH AND YOU WILL FIND OUT THAT PROGRAMMERS CANNOT WRITE IN ENGLISH."><p>On the serious side, we need to emphasize communication skills in the technology industry. Even if I have a great idea, if I can’t communicate it, it will go nowhere. And neither will I.</p><p>Just to be clear, by “communication” I mean “talking with other humans”. Which brings me to today’s topic on the lighter side, and that is the overloading of English.Words such as <em>function</em>, <em>overload</em>, <em>network</em>, <em>build</em> all have specific meanings that weren’t originally found in <a href="https://en.wikipedia.org/wiki/Webster's_Dictionary#First_edition_1828" target="_blank" rel="noopener">Webster’s</a>.The 1828 definition of <em>computer</em>, for example, is:</p><blockquote><p><em>One who computes; a reckoner; a calculator.</em></p></blockquote><p>In i18n, there are other words that have very specific meanings: <em>global</em>, <em>globalization</em>, <em>collation</em>, <em>contraction</em>, and of course <em>locale</em>, just to name a few. </p><p>To that end, I have started to add some tongue-in-cheek “redefinitions” to the <a href="#rdfooter">bottom of the blog</a> just to remind us all that these words have non-software meanings.</p><p>If you want to see them all without hitting reload an infinite number of times, you can see the original source <a href="https://github.com/srl295/srl295.github.io/blob/hexo/themes/landscape/source/js/retrodefinitions.js" target="_blank" rel="noopener">here</a>.</p><p>Speaking of i18n, this overloading doesn’t apply to English only. Most of my devices are set to <code>es-US</code> as their locale, so I see a lot of translated error message.  <code>gcc</code> for example has a thriving <a href="http://translationproject.org/domain/gcc.html" target="_blank" rel="noopener">translation project</a> where dedicated persons cause “English” to be translated into, for example, “Spanish” such as:</p><blockquote><p><code>#~ msgid &quot;function ‘%D’ declared overloaded, but no definitions appear with which to resolve it?!?&quot;</code></p></blockquote><blockquote><p><code>#~ msgstr &quot;¿!¿se declaró la función ‘%D’ sobrecargada, pero no aparece ninguna definición con la cual resolverlo?!?&quot;</code></p></blockquote><p>Not sure why that’s <code>¿!¿</code> where I might expect <code>¿¡¿</code> — perhaps the initial <code>!</code> just shows the compiler’s incredulity. In any event, <em>sobrecargada</em> seems to be a great cognate for <em>overloaded</em>. And with that, I will let you goto whatever you were doing before you started reading.</p><p>PR’s are welcome on my little list, or leave comments below. What are your favorite examples of overloaded terms, in any language?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Besides the Globalization Pipeline mug, one of my favorite coffee mugs says:&lt;/p&gt;
&lt;img src=&quot;/2017/02/07/literate-programmers/IMG_0010.jpg&quot;
      
    
    </summary>
    
    
      <category term="i18n" scheme="https://srl295.github.io/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title>Fallbacks in ICU4C Converters</title>
    <link href="https://srl295.github.io/2017/02/02/icu4c-fallbacks/"/>
    <id>https://srl295.github.io/2017/02/02/icu4c-fallbacks/</id>
    <published>2017-02-03T00:05:26.000Z</published>
    <updated>2020-05-22T00:10:18.506Z</updated>
    
    <content type="html"><![CDATA[<p>Unicode’s <a href="http://icu-project.org" target="_blank" rel="noopener">ICU</a> version 59 is well underway at this point. While ideally everything would use Unicode, there still remains many systems — and much content — that is in non-Unicode encodings. For this reason, ICU, in both the C/C++ and the Java flavors, has rich support for codepage conversion.</p><p>One of many great features in ICU is the <a href="http://userguide.icu-project.org/conversion/converters#TOC-Error-Callbacks" target="_blank" rel="noopener">callback support</a>. A lot can go wrong during codepage conversion, but in ICU, you can control what happens during exceptional situations.</p><p>Let’s try a simple sample. By the way, see the end of this post for hints on compiling the samples.</p><h1 id="Substitute-Always"><a href="#Substitute-Always" class="headerlink" title="Substitute, Always"></a>Substitute, Always</h1><p>Our task is to convert <code>black-bird</code> (but with a <code>U+00AD</code>, “Soft Hyphen” in between the two words) to ASCII.</p><figure class="highlight cpp"><figcaption><span>substituteTest-0.cpp</span><a href="/downloads/code/substituteTest-0.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/utypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ustdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> <span class="comment">/*argc*/</span>, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="comment">/*argv*/</span> [])</span> </span>{</span><br><span class="line">    UErrorCode status=U_ZERO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="function">LocalUConverterPointer <span class="title">cnv</span><span class="params">(ucnv_open(<span class="string">"us-ascii"</span>, &amp;status))</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(U_FAILURE(status)) {</span><br><span class="line">        u_printf(<span class="string">"Error opening: %s\n"</span>, u_errorName(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function">UnicodeString <span class="title">str</span><span class="params">(<span class="string">"black-bird"</span>)</span></span>;</span><br><span class="line">    str.setCharAt(<span class="number">5</span>, <span class="number">0x00AD</span>); <span class="comment">// soft hyphen</span></span><br><span class="line">    <span class="keyword">const</span> UChar *uch = str.getTerminatedBuffer();</span><br><span class="line">    u_printf(<span class="string">"Input String: %S length %d\n"</span>, uch, str.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> bytes[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int32_t</span> bytesWritten =</span><br><span class="line">     ucnv_fromUChars(cnv.getAlias(), bytes, <span class="number">1024</span>, uch, <span class="number">-1</span>, &amp;status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(U_FAILURE(status)) {</span><br><span class="line">        u_printf(<span class="string">"Error converting: %s\n"</span>, u_errorName(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    u_printf(<span class="string">"Converted %d bytes\n"</span>, bytesWritten);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int32_t</span> i=<span class="number">0</span>; i&lt;bytesWritten; i++) {</span><br><span class="line">        u_printf(<span class="string">"\\x%02X "</span>, bytes[i]&amp;<span class="number">0xFF</span>);</span><br><span class="line">    }</span><br><span class="line">    u_printf(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">// try to print it out on the console</span></span><br><span class="line">    bytes[bytesWritten]=<span class="number">0</span>; <span class="comment">// terminate it first</span></span><br><span class="line">    <span class="built_in">puts</span>(bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// LocalUConverterPointer will cleanup cnv</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure> <p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input String: black­bird length 10</span><br><span class="line">Converted 9 bytes</span><br><span class="line">\x62 \x6C \x61 \x63 \x6B \x62 \x69 \x72 \x64 </span><br><span class="line">blackbird</span><br></pre></td></tr></table></figure><p>Hm. Ten characters in, nine out. What happened?  Well, <code>U+00AD</code> is not a part of ASCII. ASCII is a seven bit encoding, thus only maps code points <code>\x00</code> through <code>\x7F</code> inclusively. Furthermore, <code>U+00AD</code> is <a href="http://www.unicode.org/glossary/#default_ignorable" target="_blank" rel="noopener">Default Ignorable</a>, and as of ICU 54.1 (2014) in <a href="http://bugs.icu-project.org/trac/ticket/10551" target="_blank" rel="noopener">#10551</a>, the soft hyphen can just be dropped.</p><p>But what if, for some reason, you don’t want the soft hyphen dropped? The pre ICU 54.1 behavior can be brought back easily with a custom call back.  So, roll up your collective sleeves, and:</p><figure class="highlight cpp"><figcaption><span>alwaysSubstitute.h</span><a href="/downloads/code/alwaysSubstitute.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// © 2016 and later: Unicode, Inc. and others.</span></span><br><span class="line"><span class="comment">// License &amp; terms of use: http://www.unicode.org/copyright.html</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv_err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv_cb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a modified version of ICU’s UCNV_FROM_U_CALLBACK_SUBSTITUTE</span></span><br><span class="line"><span class="comment"> * it unconditionally substitutes on irregular codepoints.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> *   ucnv_setFromUCallBack(c, UCNV_FROM_U_CALLBACK_SUBSTITUTE_ALWAYS, NULL, NULL, NULL, &amp;status);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">U_CAPI <span class="keyword">void</span>    U_EXPORT2</span><br><span class="line">UCNV_FROM_U_CALLBACK_SUBSTITUTE_ALWAYS (</span><br><span class="line"> <span class="keyword">const</span> <span class="keyword">void</span> *context,</span><br><span class="line"> UConverterFromUnicodeArgs *fromArgs,</span><br><span class="line"> <span class="keyword">const</span> UChar* codeUnits,</span><br><span class="line"> <span class="keyword">int32_t</span> length,</span><br><span class="line"> UChar32 codePoint,</span><br><span class="line"> UConverterCallbackReason reason,</span><br><span class="line"> UErrorCode * err)</span><br><span class="line">{</span><br><span class="line">    (<span class="keyword">void</span>)codeUnits;</span><br><span class="line">    (<span class="keyword">void</span>)length;</span><br><span class="line">    <span class="keyword">if</span> (reason &lt;= UCNV_IRREGULAR) {</span><br><span class="line">      *err = U_ZERO_ERROR;</span><br><span class="line">  ucnv_cbFromUWriteSub(fromArgs, <span class="number">0</span>, err);</span><br><span class="line">      <span class="comment">/* else the caller must have set the error code accordingly. */</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/* else ignore the reset, close and clone calls. */</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure> <p>If we <code>#include</code> this little header, and set it on the converter before we convert…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LocalUConverterPointer <span class="title">cnv</span><span class="params">(ucnv_open(<span class="string">"us-ascii"</span>, &amp;status))</span></span>;</span><br><span class="line">ucnv_setFromUCallBack(cnv.getAlias(), UCNV_FROM_U_CALLBACK_SUBSTITUTE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;status);</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>… we get the following result:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input String: black­bird length 10</span><br><span class="line">Converted 10 bytes</span><br><span class="line">\x62 \x6C \x61 \x63 \x6B \x1A \x62 \x69 \x72 \x64 </span><br><span class="line">black?bird</span><br></pre></td></tr></table></figure><p>Great! Now, we are getting <code>\x1A</code> (ASCII SUB). It works.</p><h1 id="When-missing-goes-missing"><a href="#When-missing-goes-missing" class="headerlink" title="When missing goes missing"></a>When missing goes missing</h1><p>A related question to the above has to do with converting from codepage to Unicode. That’s a better direction anyway. Convert to Unicode and stay there! One can hope. In any event…</p><p>For this task, we will convert <code>0x61, 0x80, 0x94, 0x4c, 0xea, 0xe5</code> from Shift-JIS to Unicode.</p><figure class="highlight cpp"><figcaption><span>substituteTest-2.cpp</span><a href="/downloads/code/substituteTest-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/utypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ustdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> <span class="comment">/*argc*/</span>, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="comment">/*argv*/</span> [])</span> </span>{</span><br><span class="line">    UErrorCode status=U_ZERO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="function">LocalUConverterPointer <span class="title">cnv</span><span class="params">(ucnv_open(<span class="string">"shift-jis"</span>, &amp;status))</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(U_FAILURE(status)) {</span><br><span class="line">        u_printf(<span class="string">"Error opening: %s\n"</span>, u_errorName(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> NRBYTES 6</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> bytes[NRBYTES] = { <span class="number">0x61</span>, <span class="number">0x80</span>, <span class="number">0x94</span>, <span class="number">0x4c</span>, <span class="number">0xea</span>, <span class="number">0xe5</span> };</span><br><span class="line"></span><br><span class="line">    u_printf(<span class="string">"Input Bytes: length %d\n"</span>, NRBYTES);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> NRUCHARS 50</span></span><br><span class="line">    UChar uchars[NRUCHARS];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> ucharsRead =</span><br><span class="line">     ucnv_toUChars(cnv.getAlias(), uchars, NRUCHARS, (<span class="keyword">const</span> <span class="keyword">char</span>*)bytes, NRBYTES, &amp;status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(U_FAILURE(status)) {</span><br><span class="line">        u_printf(<span class="string">"Error converting: %s\n"</span>, u_errorName(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    u_printf(<span class="string">"Converted %d uchars\n"</span>, ucharsRead);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int32_t</span> i=<span class="number">0</span>; i&lt;ucharsRead; i++) {</span><br><span class="line">        u_printf(<span class="string">"U+%04X "</span>, uchars[i]);</span><br><span class="line">    }</span><br><span class="line">    u_printf(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">// try to print it out on the console</span></span><br><span class="line">    u_printf(<span class="string">"Or string: '%S'\n"</span>, uchars);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// LocalUConverterPointer will cleanup cnv</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure> <p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input Bytes: length 6</span><br><span class="line">Converted 4 uchars</span><br><span class="line">U+0061 U+001A U+732B U+FFFD </span><br><span class="line">Or string: &apos;a猫�&apos;</span><br></pre></td></tr></table></figure><p>So, the letter &quot;a&quot; byte <code>\x61</code> turned into <code>U+0061</code>, and then we have an illegal byte <code>\x80</code> which turned into <code>U+001A</code>. Next, the valid sequence <code>\x94 \x4c</code> turns into U+732B which is 猫 (“cat”). Finally, the unmapped sequence <code>\xea \xe5</code> turns into <code>U+FFFD</code>.  Notice that the single byte illegal sequence turned into (SUB, U+001A), but the two byte sequence turned into <code>U+FFFD</code>. This is discussed somewhat <a href="http://unicode.org/reports/tr22/#Dual_Substitution_Handling" target="_blank" rel="noopener">here</a>.</p><p>So far so good?</p><p>But what if you actually want U+FFFD as the substitution character for both sequences? This would be unexpected, but perhaps you have code that is particularly looking for <code>U+FFFD</code>s.  We can write a similar callback:</p><figure class="highlight cpp"><figcaption><span>alwaysFFFD.h</span><a href="/downloads/code/alwaysFFFD.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// © 2016 and later: Unicode, Inc. and others.</span></span><br><span class="line"><span class="comment">// License &amp; terms of use: http://www.unicode.org/copyright.html</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv_err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unicode/ucnv_cb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> UChar kFFFD[] = { <span class="number">0xFFFD</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a modified version of ICU’s UCNV_TO_U_CALLBACK_SUBSTITUTE</span></span><br><span class="line"><span class="comment"> * it unconditionally substitutes U+FFFD.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> *   ucnv_setToUCallBack(c, UCNV_TO_U_CALLBACK_SUBSTITUTE_FFFD, NULL, NULL, NULL, &amp;status);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">U_CAPI <span class="keyword">void</span>    U_EXPORT2</span><br><span class="line">UCNV_TO_U_CALLBACK_SUBSTITUTE_FFFD (</span><br><span class="line">                 <span class="keyword">const</span> <span class="keyword">void</span> *context,</span><br><span class="line">                 UConverterToUnicodeArgs *toArgs,</span><br><span class="line">                 <span class="keyword">const</span> <span class="keyword">char</span>* codeUnits,</span><br><span class="line">                 <span class="keyword">int32_t</span> length,</span><br><span class="line">                 UConverterCallbackReason reason,</span><br><span class="line">                 UErrorCode * err)</span><br><span class="line">{</span><br><span class="line">    (<span class="keyword">void</span>)codeUnits;</span><br><span class="line">    (<span class="keyword">void</span>)length;</span><br><span class="line">    <span class="keyword">if</span> (reason &lt;= UCNV_IRREGULAR)</span><br><span class="line">    {</span><br><span class="line">*err = U_ZERO_ERROR;</span><br><span class="line">ucnv_cbToUWriteUChars(toArgs, kFFFD, <span class="number">1</span>, <span class="literal">NULL</span>, err);</span><br><span class="line"><span class="comment">// see ucnv_cbToUWriteSub()</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/* else ignore the reset, close and clone calls. */</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure> <p>Let’s hook it up, as before:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LocalUConverterPointer <span class="title">cnv</span><span class="params">(ucnv_open(<span class="string">"shift-jis"</span>, &amp;status))</span></span>;</span><br><span class="line">ucnv_setToUCallBack(cnv.getAlias(), UCNV_TO_U_CALLBACK_SUBSTITUTE_FFFD, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;status);</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>And drumroll please…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input Bytes: length 6</span><br><span class="line">Converted 4 uchars</span><br><span class="line">U+0061 U+FFFD U+732B U+FFFD </span><br><span class="line">Or string: &apos;a�猫�&apos;</span><br></pre></td></tr></table></figure><p>Garbage out never looked so good… </p><hr><h1 id="Building-or-nothing-up-my-sleeve"><a href="#Building-or-nothing-up-my-sleeve" class="headerlink" title="Building (or, nothing-up-my-sleeve)"></a>Building (or, nothing-up-my-sleeve)</h1><p>To build these little snippets, I recommend the shell script <a href="http://source.icu-project.org/repos/icu/trunk/tools/scripts/icurun" target="_blank" rel="noopener">icurun</a></p><p>If ICU is already installed in your appropriate paths, (visible to <code>pkg-config</code> or at least <code>icu-config</code>), you can simply run:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icurun some-great-app.cpp</span><br></pre></td></tr></table></figure><p>… and icurun will compile and run a one-off.</p><p>If, however, you’ve built ICU yourself in some directory, you can instead use:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icurun -i path/to/your/icu some-great-app.cpp</span><br></pre></td></tr></table></figure><p>… where <code>path/to/you/icu</code> is the full path to an ICU build or install directory.</p><p>If you are on windows… well, there isn’t a powershell version yet. Contributions welcome!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Unicode’s &lt;a href=&quot;http://icu-project.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ICU&lt;/a&gt; version 59 is well underway at this point. While ideall
      
    
    </summary>
    
    
      <category term="icu4c" scheme="https://srl295.github.io/tags/icu4c/"/>
    
  </entry>
  
  <entry>
    <title>Globalization Pipeline for iOS</title>
    <link href="https://srl295.github.io/2017/01/06/g11n-pipeline-ios/"/>
    <id>https://srl295.github.io/2017/01/06/g11n-pipeline-ios/</id>
    <published>2017-01-07T01:59:34.000Z</published>
    <updated>2020-05-22T00:10:18.489Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday we just tagged v1.0 of the <a href="https://github.com/IBM-Bluemix/gp-ios-client" target="_blank" rel="noopener">Globalization Pipeline SDK for iOS</a>. What can an iOS client do? Well, let’s build a simple app and find out.</p><h1 id="Starting-Out"><a href="#Starting-Out" class="headerlink" title="Starting Out"></a>Starting Out</h1><p>First, I’ll launch XCode 8 and create a new workspace.</p><p>While that is launching, I’ll warn you that your author is only a recent graduate of the Swift playground, who once deployed some toy apps to a then-new iPhone 3GS. So, it’s been a while. Any suggestions for improvement are welcome. The actual SDK, however, was a team effort.</p><p>Today’s app will be a color mixer, to help artists mix their colors. You know, red and blue makes purple, and so on.</p><img src="/2017/01/06/g11n-pipeline-ios/00_title.png"><p>I will name the workspace <code>gp-ios-color-mixer</code>, and create a new single view app called <code>GP Color Mixer</code>.  To simplify things, for now, I disable the checkbox “automatically manage signing.”</p><img src="/2017/01/06/g11n-pipeline-ios/01_singleview.png"><p>I want to include the new <a href="https://github.com/IBM-Bluemix/gp-ios-client" target="_blank" rel="noopener">SDK</a>. I’ll use <a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> to install it. Since I already have <a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a> installed, I only need to do</p><pre><code>$ brew install carthage</code></pre><p>Now I need a <code>Cartfile</code> that mentions the SDK. So I create one at the same level as my XCode project, containing:</p><pre><code>github &quot;IBM-Bluemix/gp-ios-client&quot;</code></pre><p>Following the Carthage instructions, I next run</p><pre><code>$ carthage update</code></pre><p>which results in </p><pre><code>*** Fetching gp-ios-client*** Checking out gp-ios-client at &quot;v1.0&quot;*** xcodebuild output can be found in /var/folders/j9/yn_32djn36x4d4c2mvcr1kgm0000gn/T/carthage-xcodebuild.p2nKN2.log*** Building scheme &quot;GPSDK&quot; in TestFramework.xcworkspace</code></pre><p>So far so good.  Looking in the Finder, I now have <code>GPSDK.framework</code> right where I expect. </p><img src="/2017/01/06/g11n-pipeline-ios/02_framework.png"><p>I’ll add it under “Linked frameworks and Libraries”.</p><img src="/2017/01/06/g11n-pipeline-ios/03_linked.png"><p>We also need to make sure the framework is available at runtime. To do that, we add a build phase with a one-line script: <code>/usr/local/bin/carthage copy-frameworks</code> with a single input file -  <code>$(SRCROOT)/Carthage/Build/iOS/GPSDK.framework</code></p><img src="/2017/01/06/g11n-pipeline-ios/04_buildphase.png"><p>Will it build? I add this to the top of my generated <code>ViewController.swift</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> GPSDK</span><br></pre></td></tr></table></figure><p>I mentioned turning off code signing, but I still ran into some odd warnings:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A shell task (/usr/bin/xcrun codesign --force --sign - --preserve-metadata=identifier,entitlements &quot;/Users/srl/Library/Developer/Xcode/DerivedData/gp-ios-color-mixer-evyxcmilwuakdmdvxqqpmmnzisnn/Build/Products/Debug-iphonesimulator/GP Color Mixer.app/Frameworks/GPSDK.framework&quot;) failed with exit code 1:</span><br><span class="line">/Users/srl/Library/Developer/Xcode/DerivedData/gp-ios-color-mixer-evyxcmilwuakdmdvxqqpmmnzisnn/Build/Products/Debug-iphonesimulator/GP Color Mixer.app/Frameworks/GPSDK.framework: replacing existing signature</span><br><span class="line">/Users/srl/Library/Developer/Xcode/DerivedData/gp-ios-color-mixer-evyxcmilwuakdmdvxqqpmmnzisnn/Build/Products/Debug-iphonesimulator/GP Color Mixer.app/Frameworks/GPSDK.framework: resource fork, Finder information, or similar detritus not allowed</span><br><span class="line"></span><br><span class="line">Command /bin/sh failed with exit code 1</span><br></pre></td></tr></table></figure><p>Following <a href="https://developer.apple.com/library/content/qa/qa1940/_index.html" target="_blank" rel="noopener">QA1940</a> I was able to make some progress by running <code>xattr -cr &#39;./Carthage/Build/iOS/GPSDK.framework&#39;</code>.  Now, ⌘R Run rewards me with a blank app window and no errors. Let’s write some code!</p><h1 id="Applying-myself-to-the-App"><a href="#Applying-myself-to-the-App" class="headerlink" title="Applying myself to the App"></a>Applying myself to the App</h1><p>By <em>code</em>, of course, I mean a trip to the storyboard. Let&#39;s add a launch icon, because we can.</p><p>Now, I add some static fields, two picker views (for the input colors), and a button for action.</p><img src="/2017/01/06/g11n-pipeline-ios/05_controls.png" title="Starting to look like an app…"><p>I wrote <code>Color.swift</code> to handle the color mixing. It will only support mixing from three of the primary colors - Red, Yellow, Blue. Any other mixing turns into muddy brown. Playground tested, ready to go.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> red = <span class="number">0</span>, orange, yellow, green, blue, purple, muddy;</span><br><span class="line">    <span class="comment">// r+y = o, y+b = g, b+r = p</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .red:      <span class="keyword">return</span> <span class="string">"red"</span></span><br><span class="line">        <span class="keyword">case</span> .orange:   <span class="keyword">return</span> <span class="string">"orange"</span></span><br><span class="line">        <span class="keyword">case</span> .yellow:   <span class="keyword">return</span> <span class="string">"yellow"</span></span><br><span class="line">        <span class="keyword">case</span> .green:    <span class="keyword">return</span> <span class="string">"green"</span></span><br><span class="line">        <span class="keyword">case</span> .blue:     <span class="keyword">return</span> <span class="string">"blue"</span></span><br><span class="line">        <span class="keyword">case</span> .purple:   <span class="keyword">return</span> <span class="string">"purple"</span></span><br><span class="line">        <span class="keyword">case</span> .muddy:    <span class="keyword">return</span> <span class="string">"muddy brown"</span> <span class="comment">// use this if we don't know how to mix a color</span></span><br><span class="line">        <span class="comment">// should be exhaustive</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Mix the colors, return the result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mix</span><span class="params">( with: Color )</span></span> -&gt; <span class="type">Color</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">self</span> == .muddy || with == .muddy ) &#123;</span><br><span class="line">        <span class="keyword">return</span> .muddy <span class="comment">// anything + mud = mud</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( with == <span class="keyword">self</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>  <span class="comment">// identity!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .red:</span><br><span class="line">            <span class="keyword">switch</span> with &#123;</span><br><span class="line">            <span class="keyword">case</span> .yellow:   <span class="keyword">return</span> .orange</span><br><span class="line">            <span class="keyword">case</span> .blue:     <span class="keyword">return</span> .purple</span><br><span class="line">            <span class="keyword">default</span>:        <span class="keyword">return</span> .muddy</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .yellow:</span><br><span class="line">            <span class="keyword">switch</span> with &#123;</span><br><span class="line">            <span class="keyword">case</span> .red:      <span class="keyword">return</span> .orange</span><br><span class="line">            <span class="keyword">case</span> .blue:     <span class="keyword">return</span> .green</span><br><span class="line">            <span class="keyword">default</span>:        <span class="keyword">return</span> .muddy</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .blue:</span><br><span class="line">            <span class="keyword">switch</span> with &#123;</span><br><span class="line">            <span class="keyword">case</span> .red:      <span class="keyword">return</span> .purple</span><br><span class="line">            <span class="keyword">case</span> .yellow:   <span class="keyword">return</span> .green</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> .muddy</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> .muddy</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time to wire it up. We create <code>IBOutlets</code> for each of the items. And, I’ll clear the result label just to verify that things are wired up. It runs OK, good.</p><img src="/2017/01/06/g11n-pipeline-ios/06_wired.png" title="Wired for sound"><p>Now, let’s set up the delegate stuff so that we can get the list of colors showing.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIPickerViewDelegate</span>, <span class="title">UIPickerViewDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// …</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pickerview stuff</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfComponents</span><span class="params">(<span class="keyword">in</span> pickerView: UIPickerView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> primaryColors = [ <span class="type">Color</span>.red, <span class="type">Color</span>.blue, <span class="type">Color</span>.yellow ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line"><span class="keyword">return</span> primaryColors[row].simpleDescription()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hey, just a little more code and we’re feature complete!</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">doMix</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">let</span> color1 = primaryColors[mixOne.selectedRow(inComponent: <span class="number">0</span>)]</span><br><span class="line"><span class="keyword">let</span> color2 = primaryColors[mixTwo.selectedRow(inComponent: <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newColor = color1.mix(with: color2)</span><br><span class="line"></span><br><span class="line">resultLabel.text = newColor.simpleDescription()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2017/01/06/g11n-pipeline-ios/07_dcut.png" title="Works in English… Ship it (just kidding)"><p>At least, feature complete in English.</p><p>I’ll next take stock of the resource strings we need to have translated, so that we can run them through the Globalization Pipeline. I’ll call this <code>gp-color-mixer.json</code> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"red"</span>: <span class="string">"red"</span>,</span><br><span class="line">    <span class="attr">"orange"</span>: <span class="string">"orange"</span>,</span><br><span class="line">    <span class="attr">"yellow"</span>: <span class="string">"yellow"</span>,</span><br><span class="line">    <span class="attr">"green"</span>: <span class="string">"green"</span>,</span><br><span class="line">    <span class="attr">"blue"</span>: <span class="string">"blue"</span>,</span><br><span class="line">    <span class="attr">"purple"</span>: <span class="string">"purple"</span>,</span><br><span class="line">    <span class="attr">"muddy brown"</span>: <span class="string">"muddy brown"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Color Mixer"</span>,</span><br><span class="line">    <span class="attr">"mix"</span>: <span class="string">"Mix"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mixing-the-Blue"><a href="#Mixing-the-Blue" class="headerlink" title="Mixing the Blue"></a>Mixing the Blue</h1><p>Time to fire up <a href="https://bluemix.net" target="_blank" rel="noopener">Bluemix</a>. We are going to basically follow the <a href="https://github.com/IBM-Bluemix/gp-common#quick-start-guide" target="_blank" rel="noopener">Globalization Pipeline Quick Start Guide</a> for the this part, which I will refer to.</p><img src="/2017/01/06/g11n-pipeline-ios/10_service.png"><p>First, I <a href="https://github.com/IBM-Bluemix/gp-common#1-create-a-new-globalization-pipeline-service-instance" target="_blank" rel="noopener">create an instance</a> of the Globalization Pipeline. The name you give the instance doesn’t matter here.</p><img src="/2017/01/06/g11n-pipeline-ios/11_instance.png"><p>Now I create a bundle named <code>gp-color-mixer</code>. This name <em>does</em> matter, as our iOS app will use it to access the content.</p><img src="/2017/01/06/g11n-pipeline-ios/12_bundle.png"><p>I’ll Upload the <code>gp-color-mixer.json</code> file above as the source English content, choosing JSON format for the upload. I pick a few languages for the target.</p><p>If I view the bundle, I can see our strings there, as well as translated versions.</p><img src="/2017/01/06/g11n-pipeline-ios/13_español.png"><p>The Globalization Pipeline offers this web UI to manage content, as well as powerful REST APIs for managing the translation workflow. I need to grant access to the iOS app so that it can <em>read</em> but not <em>modify</em> the translations.  So, switching over to the <em>API Users</em> tab…</p><img src="/2017/01/06/g11n-pipeline-ios/14_api.png"><p>The result of creating the API user is that some access information is shown, something like the following:</p><pre><code>API User ID: 5726d656c6f6e7761746572Password: aHVudGVyNDIKInstance ID: 77617465726d656c6f6e77617465726dURL: https://something.something.bluemix.net/something/something</code></pre><p>I take these and plug them into a new swift file named <code>ReaderCredentials.swift</code> like so: (this is a variant of <a href="https://github.com/IBM-Bluemix/gp-ios-client/blob/master/TestFramework/TestSDK/TestSDK/ReaderCredentials-SAMPLE.swift" target="_blank" rel="noopener">ReaderCredentials-SAMPLE.swift</a> in the SDK’s repo)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReaderCredentials</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> userId       = <span class="string">"5726d656c6f6e7761746572"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> password     = <span class="string">"aHVudGVyNDIK"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> instanceId   = <span class="string">"77617465726d656c6f6e77617465726d"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> url          = <span class="string">"https://something.something.bluemix.net/something/something"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> bundleId     = <span class="string">"gp-color-mixer"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(Now, after putting my <em>actual</em> credentials in, and a brief offscreen struggle with <code>.gitignore</code>, I move on…)</p><h1 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h1><p>I’m almost done.</p><p>First, in the <code>ViewController.swift</code>, we initialize the GP service and start setting up a few UI items:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gp = <span class="type">GPService</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(key: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gp.localizedString(key, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(color: Color)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(key: color.simpleDescription())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    resultLabel.text = <span class="string">"Loading…"</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> gp.initService(url: <span class="type">ReaderCredentials</span>.url,</span><br><span class="line">            instanceId: <span class="type">ReaderCredentials</span>.instanceId,</span><br><span class="line">            bundleId:   <span class="type">ReaderCredentials</span>.bundleId,</span><br><span class="line">            userId:     <span class="type">ReaderCredentials</span>.userId,</span><br><span class="line">            password:   <span class="type">ReaderCredentials</span>.password,</span><br><span class="line">            </span><br><span class="line">            languageId:<span class="literal">nil</span>,</span><br><span class="line">            alwaysLoadFromServer: <span class="literal">false</span>,</span><br><span class="line">            expireAfter: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up strings</span></span><br><span class="line">        titleLabel.text = <span class="keyword">get</span>(key: <span class="string">"title"</span>)</span><br><span class="line">        mixButton.setTitle(<span class="keyword">get</span>(key: <span class="string">"mix"</span>), <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</span><br><span class="line">        mixButton.titleLabel?.text = <span class="keyword">get</span>(key: <span class="string">"mix"</span>)</span><br><span class="line">        resultLabel.text = <span class="string">""</span> <span class="comment">// clear this</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">GPService</span>.<span class="type">GPError</span>.languageNotSupported &#123;</span><br><span class="line">        resultLabel.text = (<span class="string">"This language is not supported..."</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">GPService</span>.<span class="type">GPError</span>.requestServerError(<span class="keyword">let</span> errorDescription) &#123;</span><br><span class="line">        resultLabel.text = (<span class="string">"Request server error: "</span> + errorDescription)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">GPService</span>.<span class="type">GPError</span>.<span class="type">HTTPError</span>(<span class="keyword">let</span> statusCode) &#123;</span><br><span class="line">        resultLabel.text = (<span class="string">"Request server error: HTTP \(statusCode)"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        resultLabel.text = (<span class="string">"Other error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we set up the service with our credentials. Then, we use our new <code>get(key: )</code> function to set the title and mix button’s label.</p><p>There is also a <code>get(color: )</code> variant that will translate one of our <code>Color</code> objects. So we use that for the actual mixing function:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">doMix</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    …</span><br><span class="line">    resultLabel.text = <span class="keyword">get</span>(color: newColor)</span><br></pre></td></tr></table></figure><p>Similarly, we can get the <code>UIPickerView</code> to use localized color names by using this same function:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(color: primaryColors[row])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looks good!</p><img src="/2017/01/06/g11n-pipeline-ios/20_bueno.png" title="Now we can ship it… to the world!"><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>The iOS app will pick up changes if the translated content changes on the server. We could experiment with adding or removing languages, or updating translated keys.</p><p>You can find the source code at <a href="https://github.com/srl295/gp-ios-color-mixer" target="_blank" rel="noopener">https://github.com/srl295/gp-ios-color-mixer</a>.</p><p>Let me know if this works for you. This is my first post, and as I mentioned first app, in <a href="https://swift.org" target="_blank" rel="noopener">Swift</a> so that’s a milestone. And, do let me know if<code>^H^H</code> what can be done to improve the sample app.</p><p>Thanks! Now go and make it global.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday we just tagged v1.0 of the &lt;a href=&quot;https://github.com/IBM-Bluemix/gp-ios-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Globalization 
      
    
    </summary>
    
    
      <category term="globalizationpipeline" scheme="https://srl295.github.io/tags/globalizationpipeline/"/>
    
  </entry>
  
  <entry>
    <title>GP Client for JavaScript v1.3.0 released</title>
    <link href="https://srl295.github.io/2016/12/07/g11n-pipeline-1-3-0/"/>
    <id>https://srl295.github.io/2016/12/07/g11n-pipeline-1-3-0/</id>
    <published>2016-12-08T00:43:08.000Z</published>
    <updated>2020-05-22T00:10:18.489Z</updated>
    
    <content type="html"><![CDATA[<p>It’s time for a refresh on the Globalization Pipeline Node.js client.I’ve just released <a href="https://github.com/IBM-Bluemix/gp-js-client/releases/tag/v1.3.0" target="_blank" rel="noopener">v1.3.0</a> of this SDK.You can update your package.json the usual way, with <code>npm install --save g11n-pipeline</code></p><p><a href="https://badge.fury.io/js/g11n-pipeline" target="_blank" rel="noopener"><img src="https://badge.fury.io/js/g11n-pipeline.svg" alt="npm version"></a></p><p>I managed to close about <a href="https://github.com/IBM-Bluemix/gp-js-client/milestone/7?closed=1" target="_blank" rel="noopener">13 issues</a> since v1.2.x </p><h2 id="Quality"><a href="#Quality" class="headerlink" title="Quality"></a>Quality</h2><p>I was able to increase <em>function</em> coverage to 100% thanks to the <a href="https://marketplace.visualstudio.com/items?itemName=bradleymeck.codecover" target="_blank" rel="noopener">VSCode coverage plugin</a>,and increase line coverage to 91%. Of course, when you test, you find bugs. Bugs such asrealizing that <code>updateResourceStrings()</code> was unusable because there was<a href="https://github.com/IBM-Bluemix/gp-js-client/pull/49/files#diff-50cfa59973c04321b5da0c6da0fdf4feR757" target="_blank" rel="noopener">no way to pass the languageId parameter</a>.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>First of all, I <a href="https://github.com/IBM-Bluemix/gp-js-client/pull/46" target="_blank" rel="noopener">synchronized the client</a> with the latest current REST API. So take a peek at the <a href="https://github.com/IBM-Bluemix/gp-js-client#api-reference" target="_blank" rel="noopener">docs</a> againand see if there are any new features or fields.</p><p>I also tried to add some convenience functions. For example, getting the fulllist of language IDs supported used to require concatenating the source and targetlists. Now, with <a href="https://github.com/IBM-Bluemix/gp-js-client/issue/40" target="_blank" rel="noopener">#40</a>you can call <code>.languages()</code> on the <code>Bundle</code> object and it will build thislist for you. There is also a <code>bundle.entries()</code> accessor as of <a href="https://github.com/IBM-Bluemix/gp-js-client/issues/14" target="_blank" rel="noopener">#14</a>which returns <code>ResourceEntry</code> objects.</p><p>Speaking of convenience, most places where you used to call <code>.someFunction({}, function callback(…){});</code>the <code>{}</code> are optional. If it worked with <code>{}</code> before, it&#39;s now optional.</p><p>The sample PR where I <a href="https://github.com/IBM-Bluemix/gp-nodejs-sample/pull/10/files" target="_blank" rel="noopener">updated the sample code</a>shows some of the code improvements.</p><p>There are more features to add here, but I hope you like the changes in v1.3.0!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s time for a refresh on the Globalization Pipeline Node.js client.
I’ve just released &lt;a href=&quot;https://github.com/IBM-Bluemix/gp-js-cl
      
    
    </summary>
    
    
      <category term="globalizationpipeline" scheme="https://srl295.github.io/tags/globalizationpipeline/"/>
    
  </entry>
  
  <entry>
    <title>40th Internationalization and Unicode Conference</title>
    <link href="https://srl295.github.io/2016/11/04/iuc40/"/>
    <id>https://srl295.github.io/2016/11/04/iuc40/</id>
    <published>2016-11-05T05:33:58.000Z</published>
    <updated>2020-05-22T00:10:18.506Z</updated>
    
    <content type="html"><![CDATA[<p>I&#39;ll start, and could almost end, my post with this tweet:</p><blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/IUC40?src=hash" target="_blank" rel="noopener">#IUC40</a> ended today. It was incredibly pleasing to see many old faces, and some new ones. Next up, <a href="https://twitter.com/hashtag/UTC149?src=hash" target="_blank" rel="noopener">#UTC149</a>, next week. 🍷</p>&mdash; Ken Lunde (小林剣) (@ken_lunde) <a href="https://twitter.com/ken_lunde/status/794389905145151488" target="_blank" rel="noopener">November 4, 2016</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>Yes, that exactly. November 1-3, 2016 was the 40<sup>th</sup> <a href="http://www.unicodeconference.org" target="_blank" rel="noopener">Unicode conference</a>.They used to be <a href="http://www.unicodeconference.org/past-conferences.htm" target="_blank" rel="noopener">twice a year, in multiple locations</a>, as in,outside of Santa Clara, California, USA.</p><p>Now that the conference is over, I’ll have to take some time to view slides from all of the<a href="http://www.unicodeconference.org/program.htm" target="_blank" rel="noopener">other great presentations</a> I missed whilegiving a personal record number of talks (long story), apart from the lightning talks which were apparently not recorded.</p><p>The conference, and Unicode in general, is about <em>people</em>. It is always great to see so manyfolks I&#39;ve kept up with over the years… including of course my fellow IBMers frommany time zones away.</p><p>Off the top of my head, the important technical (besides personal) conversations I&#39;ve had include:</p><ul><li>our <a href="https://github.com/IBM-Bluemix/gp-common" target="_blank" rel="noopener">Globalization Pipeline</a> service</li><li>CLDR … ICU … <a href="http://uli.unicode.org" target="_blank" rel="noopener">ULI</a></li><li>Keyboards</li><li>Node.js</li><li><a href="http://bugs.icu-project.org/trac/ticket/12845" target="_blank" rel="noopener">Greek casing</a></li><li>…and even a little emoji discussion</li></ul><p>Next week : IBM is hosting <a href="http://www.unicode.org/consortium/utc.html" target="_blank" rel="noopener">UTC 149</a> !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I&amp;#39;ll start, and could almost end, my post with this tweet:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en
      
    
    </summary>
    
    
      <category term="unicode" scheme="https://srl295.github.io/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>gp-angular-client v1.2.0</title>
    <link href="https://srl295.github.io/2016/10/07/gp-angular-client-v1-2-0/"/>
    <id>https://srl295.github.io/2016/10/07/gp-angular-client-v1-2-0/</id>
    <published>2016-10-07T20:41:47.000Z</published>
    <updated>2020-05-22T00:10:18.504Z</updated>
    
    <content type="html"><![CDATA[<p>I just pushed out version 1.2.0 of our <a href="https://github.com/IBM-Bluemix/gp-angular-client" target="_blank" rel="noopener">Angular Client for Globalization Pipeline</a>to the usual places. <code>gp-angular-client</code> on bower, <code>angular-g11n-pipeline</code> on npm. </p><p><a href="https://badge.fury.io/bo/gp-angular-client" target="_blank" rel="noopener"><img src="https://badge.fury.io/bo/gp-angular-client.svg" alt="Bower version"></a><br><a href="https://badge.fury.io/js/angular-g11n-pipeline" target="_blank" rel="noopener"><img src="https://badge.fury.io/js/angular-g11n-pipeline.svg" alt="npm version"></a></p><p>Thanks to IBMer <a href="https://github.com/ckoberlein" target="_blank" rel="noopener">@ckoberlein (GitHub)</a> this SDK now supports variable substitution. So you can have a string such as <code>Hello </code> and translate and substitute this same string, so that for example in Spanish it will be <code>Bienvenidos </code>.  So, output would be <code>Hello Steven</code> or <code>Bienvenidos Steven</code> depending on language.</p><p>More details on our <a href="https://github.com/IBM-Bluemix/gp-angular-client#variable-replacement" target="_blank" rel="noopener">README</a> and be sure to connect with us over on <a href="https://developer.ibm.com/open/ibm-bluemix-globalization-pipeline-service/angular-sdk/" target="_blank" rel="noopener">developerWorks Open</a>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just pushed out version 1.2.0 of our &lt;a href=&quot;https://github.com/IBM-Bluemix/gp-angular-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Angular 
      
    
    </summary>
    
    
      <category term="globalizationpipeline" scheme="https://srl295.github.io/tags/globalizationpipeline/"/>
    
  </entry>
  
  <entry>
    <title>source shibboleth</title>
    <link href="https://srl295.github.io/2016/07/25/shibboleth/"/>
    <id>https://srl295.github.io/2016/07/25/shibboleth/</id>
    <published>2016-07-25T23:28:15.000Z</published>
    <updated>2020-05-22T00:10:18.509Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/07/25/shibboleth/shibboleth.png" title="I’ll fire up code|emacs|vim and fix it.">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/07/25/shibboleth/shibboleth.png&quot; title=&quot;I’ll fire up code|emacs|vim and fix it.&quot;&gt;

      
    
    </summary>
    
    
      <category term="scm" scheme="https://srl295.github.io/tags/scm/"/>
    
      <category term="dvcs" scheme="https://srl295.github.io/tags/dvcs/"/>
    
  </entry>
  
  <entry>
    <title>Translating ICU4C with Globalization Pipeline</title>
    <link href="https://srl295.github.io/2016/07/14/Translating-ICU4C-with-Globalization-Pipeline/"/>
    <id>https://srl295.github.io/2016/07/14/Translating-ICU4C-with-Globalization-Pipeline/</id>
    <published>2016-07-14T23:57:01.000Z</published>
    <updated>2020-05-22T00:10:18.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h1><p>This is a work in progress. If you read to the end, you’ll see we<em>almost</em> reached our goal here. </p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>I work on <a href="http://icu-project.org" target="_blank" rel="noopener">ICU4C</a> (the premier C/C++ library for Unicode support).And I work on <a href="https://developer.ibm.com/open/ibm-bluemix-globalization-pipeline-service/" target="_blank" rel="noopener">Globalization Pipeline</a>.These two haven’t really crossed paths… until now.</p><h1 id="What-we’ll-do"><a href="#What-we’ll-do" class="headerlink" title="What we’ll do"></a>What we’ll do</h1><p>This blog will cover how to use the Globalization Pipeline to translate<code>uconv</code>, one of ICU’s sample command line apps. We&#39;ll be translating the resourcefiles you can see in <a href="http://bugs.icu-project.org/trac/browser/icu/trunk/source/extra/uconv/resources" target="_blank" rel="noopener"><code>source/extra/uconv/resources</code></a></p><h1 id="Gathering-the-tools"><a href="#Gathering-the-tools" class="headerlink" title="Gathering the tools"></a>Gathering the tools</h1><ul><li><p>First, <a href="http://site.icu-project.org/download" target="_blank" rel="noopener">Download ICU4C</a> source code (as a tarball or from the SVN repository) and compile it. See its readme for more details.</p></li><li><p>Now, set up Globalization Pipeline. See our <a href="https://github.com/IBM-Bluemix/gp-common#quick-start-guide" target="_blank" rel="noopener">Quick Start Guide</a>for getting your Globalization Pipeline instance created and set up. </p><ul><li><p>In the GP dashboard, create a bundle named <code>uconv</code>. Select which languages you want to translate into, but don’t upload any strings.  Click Save.</p></li><li><p>Also from the Bluemix dashboard, get the service credentials for your service.  Save these in a file called <code>mycreds.json</code> that should look like theexample in <a href="https://github.com/IBM-Bluemix/gp-java-tools/blob/master/gp-cli.md#command-reference" target="_blank" rel="noopener">this document</a>.</p></li></ul></li><li><p>We’ll also need the <code>gp-cli</code> java tool, so download the latest jar from <a href="https://github.com/IBM-Bluemix/gp-java-tools/releases" target="_blank" rel="noopener">gp-java-tools</a>.</p></li></ul><h1 id="Into-the-Pipeline"><a href="#Into-the-Pipeline" class="headerlink" title="Into the Pipeline"></a>Into the Pipeline</h1><p>Now, let&#39;s get some translated content </p><ul><li><code>cd</code> <a href="http://bugs.icu-project.org/trac/browser/icu/trunk/source/extra/uconv/resources/" target="_blank" rel="noopener"><code>source/extra/uconv/resources</code></a></li></ul><p>Hm. These files are in icu4c resource format, which isn&#39;t (yet?) supported by Globalization Pipeline… directly. Let&#39;s try an interim step.</p><ul><li><code>genrb -x root root.txt</code></li><li><code>genrb -x fr fr.txt</code></li></ul><p>Now we have <code>root.xlf</code> and <code>fr.xlf</code> (for good measure).</p><p>Here&#39;s a snippet of <code>root.xlf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;group id = &quot;root&quot; restype = &quot;x-icu-table&quot;&gt;</span><br><span class="line">    &lt;trans-unit id = &quot;U_BUFFER_OVERFLOW_ERROR&quot; resname = &quot;U_BUFFER_OVERFLOW_ERROR&quot;&gt;</span><br><span class="line">        &lt;source&gt;Buffer overflow&lt;/source&gt;</span><br><span class="line">    &lt;/trans-unit&gt;</span><br><span class="line">    …</span><br></pre></td></tr></table></figure><p>OK. The <code>gp-cli</code> tool says it handles XLIFF as a file format. Let&#39;s get that set up.</p><ul><li><code>java -jar gp-cli-1.1.0.jar import -b uconv -f root.xlf -l en -t xliff -j mycreds.json</code></li></ul><p>Note that we use the language tag <code>en</code> for English here, while the file was originally entitled <code>root</code>.This is because Globalization Pipeline works with the explicit source language, whereas for ICU, <code>root</code>is what will be consulted as a fallback if no other languages are available.</p><p>It says it uploaded… but let’s check in the Globalization Pipeline dashboard:</p><img src="/2016/07/14/Translating-ICU4C-with-Globalization-Pipeline/uploadeng.png" title="English content uploaded"><p>OK! That’s great.  Browsing over to the other language translations, we can see that the MT engines are hardat work. However, we happen to already have some French translationsin the ICU source base. We&#39;ll upload this, to overwrite some of the Machine-translatedentries for French:</p><ul><li><code>java -jar gp-cli-1.1.0.jar import -b uconv -f fr.xlf -l fr -t xliff -j mycreds.json</code></li></ul><p>Great. Now we have some human translated content as well. We cannow correct, upload/download content in the dashboard until we arehappy with the translations there.</p><h1 id="Out-of-the-Pipeline"><a href="#Out-of-the-Pipeline" class="headerlink" title="Out of the Pipeline"></a>Out of the Pipeline</h1><p>OK, now for the next step- getting those translations back into ICU4C.</p><p>We can list the bundle status from the command line:</p><ul><li><code>java -jar gp-cli-1.1.0.jar show-bundle -b uconv -j mycreds.json</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sourceLanguage&quot;: &quot;en&quot;,</span><br><span class="line">  &quot;targetLanguages&quot;: [</span><br><span class="line">    &quot;de&quot;,</span><br><span class="line">    &quot;es&quot;,</span><br><span class="line">    &quot;fr&quot;,</span><br><span class="line">    &quot;it&quot;,</span><br><span class="line">    &quot;ja&quot;,</span><br><span class="line">    &quot;ko&quot;,</span><br><span class="line">    &quot;pt-BR&quot;,</span><br><span class="line">    &quot;zh-Hans&quot;,</span><br><span class="line">    &quot;zh-Hant&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;readOnly&quot;: false,</span><br><span class="line">  &quot;updatedBy&quot;: &quot;…srloomis@us.ibm.com&quot;,</span><br><span class="line">  &quot;updatedAt&quot;: &quot;2016-07-14T15:22:40.233-07&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we’ll download the files in XLIFF format again:</p><ul><li><code>java -jar gp-cli-1.1.0.jar export -b uconv -f fr.xlf -l fr -t xliff -j mycreds.json</code></li><li><code>java -jar gp-cli-1.1.0.jar export -b uconv -f es.xlf -l es -t xliff -j mycreds.json</code></li><li><code>java -jar gp-cli-1.1.0.jar export -b uconv -f de.xlf -l de -t xliff -j mycreds.json</code></li><li><code>java -jar gp-cli-1.1.0.jar export -b uconv -f zh.xlf -l zh-Hans -t xliff -j mycreds.json</code></li></ul><p>… and so on. Repeat for each language you wish to download. Note that we’ve used <code>zh</code> for Chinese instead of <code>zh-Hans</code>.</p><p>OK, we have XLIFF format. How to convert it to ICU format? <code>genrb</code> only writes XLIFF, it can’t read it.</p><h1 id="And-back-again…-almost"><a href="#And-back-again…-almost" class="headerlink" title="And back again… almost."></a>And back again… almost.</h1><p>We need the XLIFF2ICU Converter as is noted <a href="http://userguide.icu-project.org/locale/resources#TOC-Using-XLIFF-for-Localization" target="_blank" rel="noopener">here</a>.</p><p>To build it, at present, this worked for me:</p><ul><li>download <a href="http://site.icu-project.org/download" target="_blank" rel="noopener">ICU4J</a> source (yes, J)</li><li>run <code>ant xliff</code> from the top level</li><li>you will end up with an <code>out/xliff/lib/xliff.jar</code> </li></ul><p>Still with me? Head back to the <code>uconv/resources</code> directory, and now run:</p><ul><li><code>java -jar xliff.jar  -s . -d . fr.xlf</code></li></ul><p>And that brings us to… </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Processing file: ./fr.xlf</span><br><span class="line">The XLIFF document is invalid, please check it first: </span><br><span class="line">Line 3, Column 81</span><br><span class="line">Error: cvc-elt.1: No se ha encontrado la declaración del elemento &apos;xliff&apos;.</span><br></pre></td></tr></table></figure><p>Hrm.  Seems like the XLIFF output isn&#39;t quite ready to be consumed.I <a href="https://github.com/IBM-Bluemix/gp-java-tools/issues/5" target="_blank" rel="noopener">filed a bug</a> on this,of course.</p><h1 id="Plan-B"><a href="#Plan-B" class="headerlink" title="Plan B "></a>Plan B </h1><p>We&#39;re so close… let&#39;s see what we can do.What if we fetch the data in JSON format, and then hack up somethingto convert it to ICU format? It might suffice for this blog post.</p><p>Let&#39;s run the fetches again, but get JSON this time:</p><ul><li><code>java -jar gp-cli-1.1.0.jar export -b uconv -f fr.json -l fr -t json -j mycreds.json</code>…</li></ul><p>Now, run the following <a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a> script over the JSON files:</p><ul><li><code>node js2icu.js fr.json es.json …</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js2icu.js</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> args) &#123;</span><br><span class="line">    <span class="keyword">const</span> f = args[i];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'# read '</span> + f);</span><br><span class="line">    <span class="keyword">const</span> loc = f.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(fs.readFileSync(f));</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">'\ufeff// -*- Coding: utf-8; -*-\n//auto converted\n'</span> + loc + <span class="string">'\n&#123;\n'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> json) &#123;</span><br><span class="line">        s = s + <span class="string">'   '</span> + k + <span class="string">' &#123; "'</span>  + json[k].replace(<span class="regexp">/"/g</span>,<span class="string">'\\"'</span>) + <span class="string">'" &#125;\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s = s + <span class="string">'&#125;\n'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'# wrote '</span> + loc + <span class="string">'.txt'</span>);</span><br><span class="line">    fs.writeFileSync(loc+<span class="string">'.txt'</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You should be the proud owner of <code>.txt</code> files matching all of the languages you are using.</p><p>We&#39;re almost there. Let&#39;s go up and build <code>uconv</code>:</p><ul><li><code>cd ..</code> </li></ul><p>Now edit <code>resfiles.mk</code> and change the <code>RESSRC</code> line to reference the new translations:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESSRC = $(RESOURCESDIR)$(FILESEPCHAR)root.txt $(RESOURCESDIR)$(FILESEPCHAR)fr.txt $(RESOURCESDIR)$(FILESEPCHAR)es.txt $(RESOURCESDIR)$(FILESEPCHAR)zh.txt</span><br></pre></td></tr></table></figure><p>Build <code>uconv</code>…</p><ul><li><code>make</code></li></ul><h1 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h1><p>Let’s test it. I know <code>uwmsg.o</code> isn&#39;t really utf-8, that&#39;s why this is a test.</p><ul><li><code>env LC_ALL=es ./../../bin/uconv -f utf-8 &lt; uwmsg.o</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">La conversión a Unicode de página de códigos falló en posición de byte de entrada de 0. Bytes: Error de cf: El carácter ilegal encontró La conversión a Unicode de página de códigos falló en posición de byte de entrada de 1. ……</span><br></pre></td></tr></table></figure><p>Looks like we have a (more) translated <code>uconv</code> now.Some of the messages don’t quite work correctly due to ICU4C message conventions.Perhaps we will investigate this in the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Disclaimer&quot;&gt;&lt;a href=&quot;#Disclaimer&quot; class=&quot;headerlink&quot; title=&quot;Disclaimer&quot;&gt;&lt;/a&gt;Disclaimer&lt;/h1&gt;&lt;p&gt;This is a work in progress. If you rea
      
    
    </summary>
    
    
      <category term="globalizationpipeline" scheme="https://srl295.github.io/tags/globalizationpipeline/"/>
    
      <category term="icu" scheme="https://srl295.github.io/tags/icu/"/>
    
      <category term="wip" scheme="https://srl295.github.io/tags/wip/"/>
    
  </entry>
  
  <entry>
    <title>Perl on Bluemix</title>
    <link href="https://srl295.github.io/2016/05/02/perl-on-bluemix/"/>
    <id>https://srl295.github.io/2016/05/02/perl-on-bluemix/</id>
    <published>2016-05-02T23:17:14.000Z</published>
    <updated>2020-05-22T00:10:18.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><ol><li><p>Marcus DelGreco at #FluentConf said something about perl support on platforms.I mentioned Bluemix allowed <a href="https://console.ng.bluemix.net/docs/cfapps/byob.html" target="_blank" rel="noopener">bring your own buildpack</a></p></li><li><p>Looking through the <a href="https://docs.pivotal.io/pivotalcf/buildpacks/" target="_blank" rel="noopener">buildpack lists</a> didn&#39;t turn up Perl <em>per se</em> but…</p></li><li><p>… enter <a href="https://github.com/oetiker/sourcey-buildpack" target="_blank" rel="noopener">sourcey-buildpack</a>. It&#39;s a generic buildpack!From its README I knew I was in the right spot:</p><blockquote><p>Isn&#39;t it simply amazing to see these demos, where they throw a bunch of php, ruby, Java or python code at a Cloud Foundry siteand it gets magically turned into a running web applications. Alas for me, life is often a wee bit more complicated than that.My projects always seem to required a few extra libraries or theyare even written in an dead scripting language like Perl.</p></blockquote></li><li><p>And now for that <code>tl;dr</code>-inspiring moment:</p></li></ol><p>Let&#39;s see if the canned sample works. Hint: yes.</p><p>First, <code>cf login</code> into Bluemix, and then:</p><pre><code>$ git clone https://github.com/oetiker/sourcey-buildpack$ cd sourcey-buildpack/example$ cf push MYAPPLICATION$$ -m 128M -b https://github.com/oetiker/sourcey-buildpack</code></pre><p>The above builds perl (takes a while the <em>first</em> time) and deploys a little app that just dumps the deserialized JSON out.</p><h2 id="Improving"><a href="#Improving" class="headerlink" title="Improving"></a>Improving</h2><p>But wait! It could be even simpler.So, I opened PR<a href="https://github.com/oetiker/sourcey-buildpack/pull/2" target="_blank" rel="noopener">oetiker/sourcey-buildpack#2</a>which adds a manifest file to the example. Then, only <code>cf push</code> is needed,the <code>-b …</code> option is now unnecessary.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Marcus DelGreco at #Fluen
      
    
    </summary>
    
    
      <category term="bluemix" scheme="https://srl295.github.io/tags/bluemix/"/>
    
      <category term="perl" scheme="https://srl295.github.io/tags/perl/"/>
    
  </entry>
  
</feed>
